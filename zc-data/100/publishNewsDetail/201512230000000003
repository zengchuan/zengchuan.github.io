[{"id":"201512230000000249","sortNo":1,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000250","sortNo":2,"contentFormatId":"1","contentTxt":"Now that Angular 2 is in beta, you’re probably itching to try it out (if you haven’t already!).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000251","sortNo":3,"contentFormatId":"1","contentTxt":"But what are all these new libraries and tools? SystemJS? RxJS? eh?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000252","sortNo":4,"contentFormatId":"1","contentTxt":"Some people say to just ignore them until after you get your feet wet, but there’s that nagging feeling – you’ll need to learn it eventually, and it just doesn’t feel right not knowing what all the pieces do.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000253","sortNo":5,"contentFormatId":"1","contentTxt":"In this post we’ll look at those dependencies and what they do. This will be a quick overview, enough to satisfy your curiousity and get you past worrying “what is all this weird new stuff.”","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000254","sortNo":6,"contentFormatId":"1","contentTxt":"What Are These Libraries For?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000255","sortNo":7,"contentFormatId":"1","contentTxt":"We’ll use the official “hello world” example from angular.io – available in Plunker here. Open up index.html and follow along.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000256","sortNo":8,"contentFormatId":"1","contentTxt":"You’ll see a bunch of scripts up top:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000257","sortNo":9,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000258","sortNo":10,"contentFormatId":"1","contentTxt":"SystemJS","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000259","sortNo":11,"contentFormatId":"1","contentTxt":"Angular 2 doesn’t have its own module system like Angular 1 did – it uses SystemJS. According to its Github page, it is a “Universal dynamic module loader”. That’s a lot of words.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000260","sortNo":12,"contentFormatId":"1","contentTxt":"SystemJS is a library written by Guy Bedford (and others) built upon es6-module-loader to provide a way to load not only ES6 modules, but also CommonJS, AMD and global scripts.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000261","sortNo":13,"contentFormatId":"1","contentTxt":"When I first came across it, I thought the “System” in the name implied that it was some big fancy standard that I had missed out on. I mean… it adds a global object called System. That seems like a strong name for a non-standard thing.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000262","sortNo":14,"contentFormatId":"1","contentTxt":"That was partially true. ES6 (aka ES2015) was going to have a global System object. It got pulled from the spec, but the es6-module-loader was created to provide a polyfill in the meantime.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000263","sortNo":15,"contentFormatId":"1","contentTxt":"SystemJS is not the only module loader that will work with Angular 2. Other module loaders, such as WebPack, can be swapped in instead. Most of the examples I’ve seen in the wild have used SystemJS, but as with everything in the Javascript world, the winds of change and favor are always blowing…","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000264","sortNo":16,"contentFormatId":"1","contentTxt":"typescript.js","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000265","sortNo":17,"contentFormatId":"1","contentTxt":"typescript.js is the transpiler used by SystemJS, which it uses to transpile TypeScript into JavaScript, live in the browser. It’s setup by System.config:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000266","sortNo":18,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000267","sortNo":19,"contentFormatId":"1","contentTxt":"angular2-polyfills","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000268","sortNo":20,"contentFormatId":"1","contentTxt":"This file is essentially a mashup of zone.js and reflect-metadata.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000269","sortNo":21,"contentFormatId":"1","contentTxt":"Zones are an idea borrowed from Dart that Angular 2 uses to efficiently know when to update the view.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000270","sortNo":22,"contentFormatId":"1","contentTxt":"reflect-metadata is used to enable dependency injection through decorators.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000271","sortNo":23,"contentFormatId":"1","contentTxt":"RxJS","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000272","sortNo":24,"contentFormatId":"1","contentTxt":"RxJS (Reactive Extensions for JavaScript) is a library for Observables. This is a term you’ll hear a lot in the context of Angular 2, and it’s a pretty exciting development. Observables are a new addition that resemble the Promises you already know from Angular 1, except they can be called multiple times.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000273","sortNo":25,"contentFormatId":"1","contentTxt":"Have you ever wanted to write something like “fire this promise chain every time some data arrives”? Observables let you do that.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000274","sortNo":26,"contentFormatId":"1","contentTxt":"Even if you don’t want to use them, Angular 2 does. So Rx.js is included as a dependency.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000275","sortNo":27,"contentFormatId":"1","contentTxt":"Get Learning!","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000276","sortNo":28,"contentFormatId":"1","contentTxt":"If you were worried about the libraries Angular 2 is using, hopefully this post helped calm your nerves. Now you can get down to the real stuff.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000277","sortNo":29,"contentFormatId":"1","contentTxt":"Check out the official angular.io site for a few nice starter tutorials.","contentBinary":"","contentPoster":"","contentUrl":null}]