[{"id":"201704280000000031","sortNo":1,"contentFormatId":"1","contentTxt":"After getting a lot of interest in a previous tutorial I posted on how to build a User Registration and Login with Angular 1, and since Angular 2 Final was recently released I thought it was time to post an updated example built with Angular 2 and TypeScript.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000032","sortNo":2,"contentFormatId":"1","contentTxt":"The example uses a fake backend that stores users in HTML5 local storage, to switch to using a real web service simply remove the fake backend providers in the app.module.ts file below the comment \"// providers used to create fake backend\".","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000033","sortNo":3,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000034","sortNo":4,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Project Structure</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000035","sortNo":5,"contentFormatId":"1","contentTxt":"I used the Angular 2 quickstart project as a base for the application, it's written in TypeScript and uses systemjs for loading modules. If you're new to angular 2 I'd recommend checking out the quickstart as it provides details on the project tooling and configuration files which aren't covered in this post.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000036","sortNo":6,"contentFormatId":"1","contentTxt":"The project and code structure mostly follows the recommendations in the official Angular 2 style guide, with my own tweaks here and there.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000037","sortNo":7,"contentFormatId":"1","contentTxt":"Each feature has it's own folder (home & login), other code such as services, models, guards etc are placed in folders prefixed with an underscore to easily differentiate them and group them together at the top of the folder structure.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000038","sortNo":8,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000039","sortNo":9,"contentFormatId":"1","contentTxt":"Below are brief descriptions and the code for the main files of the example application, all files are available in the github project linked at the top of the post.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000040","sortNo":10,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Alert Component Template</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000041","sortNo":11,"contentFormatId":"1","contentTxt":"Path: /app/_directives/alert.component.html","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000042","sortNo":12,"contentFormatId":"1","contentTxt":"The alert component template contains the html for displaying alert messages at the top of the page.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000043","sortNo":13,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000044","sortNo":14,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Alert Component</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000045","sortNo":15,"contentFormatId":"1","contentTxt":"Path: /app/_directives/alert.component.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000046","sortNo":16,"contentFormatId":"1","contentTxt":"The alert component passes alert messages to the template whenever a message is received from the alert service. It does this by subscribing to the alert service's getMessage() method which returns an Observable.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000047","sortNo":17,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000048","sortNo":18,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Auth Guard</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000049","sortNo":19,"contentFormatId":"1","contentTxt":"Path: /app/_guards/auth.guard.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000050","sortNo":20,"contentFormatId":"1","contentTxt":"The auth guard is used to prevent unauthenticated users from accessing restricted routes, in this example it's used in app.routing.ts to protect the home page route. For more information about angular 2 guards you can check out this post on the thoughtram blog.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000051","sortNo":21,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000052","sortNo":22,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Fake Backend Provider</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000053","sortNo":23,"contentFormatId":"1","contentTxt":"Path: /app/_helpers/fake-backend.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000054","sortNo":24,"contentFormatId":"1","contentTxt":"The fake backend provider enables the example to run without a backend / backendless, it uses HTML5 local storage for storing registered user data and provides fake implementations for authentication and CRUD methods, these would be handled by a real api and database in a production application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000055","sortNo":25,"contentFormatId":"1","contentTxt":"It uses the Angular 2 MockBackend to replace the default backend used by the Http service, the MockBackend enables you to intercept http requests made within the application and provide fake responses, it's also used for unit testing.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000056","sortNo":26,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000057","sortNo":27,"contentFormatId":"1","contentTxt":"<strong>Angular 2 User Model</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000058","sortNo":28,"contentFormatId":"1","contentTxt":"Path: /app/_models/user.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000059","sortNo":29,"contentFormatId":"1","contentTxt":"The user model is a small class that defines the properties of a user.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000060","sortNo":30,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000061","sortNo":31,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Alert Service</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000062","sortNo":32,"contentFormatId":"1","contentTxt":"Path: /app/_services/alert.service.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000063","sortNo":33,"contentFormatId":"1","contentTxt":"The alert service enables any component in the application to display alert messages at the top of the page via the alert component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000064","sortNo":34,"contentFormatId":"1","contentTxt":"It has methods for displaying success and error messages, and a getMessage() method that returns an Observable that is used by the alert component to subscribe to notifications for whenever a message should be displayed.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000065","sortNo":35,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000066","sortNo":36,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Authentication Service</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000067","sortNo":37,"contentFormatId":"1","contentTxt":"Path: /app/_services/authentication.service.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000068","sortNo":38,"contentFormatId":"1","contentTxt":"The authentication service is used to login and logout of the application, to login it posts the users credentials to the api and checks the response for a JWT token, if there is one it means authentication was successful so the user details including the token are added to local storage.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000069","sortNo":39,"contentFormatId":"1","contentTxt":"The logged in user details are stored in local storage so the user will stay logged in if they refresh the browser and also between browser sessions until they logout. If you don't want the user to stay logged in between refreshes or sessions the behaviour could easily be changed by storing user details somewhere less persistent such as session storage or in a property of the authentication service.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000070","sortNo":40,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000071","sortNo":41,"contentFormatId":"1","contentTxt":"<strong>Angular 2 User Service</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000072","sortNo":42,"contentFormatId":"1","contentTxt":"Path: /app/_services/user.service.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000073","sortNo":43,"contentFormatId":"1","contentTxt":"The user service contains a standard set of CRUD methods for managing users, it contains a jwt() method that's used to add the JWT token from local storage to the Authorization header of each http request.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000074","sortNo":44,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000075","sortNo":45,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Home Component Template</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000076","sortNo":46,"contentFormatId":"1","contentTxt":"Path: /app/home/home.component.html","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000077","sortNo":47,"contentFormatId":"1","contentTxt":"The home component template contains html and angular 2 template syntax for displaying a simple welcome message, a list of users and a logout link.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000078","sortNo":48,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000079","sortNo":49,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Home Component</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000080","sortNo":50,"contentFormatId":"1","contentTxt":"Path: /app/home/home.component.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000081","sortNo":51,"contentFormatId":"1","contentTxt":"The home component gets the current user from local storage and all users from the user service, and makes them available to the template.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000082","sortNo":52,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000083","sortNo":53,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Login Component Template</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000084","sortNo":54,"contentFormatId":"1","contentTxt":"Path: /app/login/login.component.html","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000085","sortNo":55,"contentFormatId":"1","contentTxt":"The login component template contains a login form with username and password fields. It displays validation messages for invalid fields when the submit button is clicked. On submit the login() method is called as long as the form is valid.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000086","sortNo":56,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000087","sortNo":57,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Login Component</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000088","sortNo":58,"contentFormatId":"1","contentTxt":"Path: /app/login/login.component.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000089","sortNo":59,"contentFormatId":"1","contentTxt":"The login component uses the authentication service to login and logout of the application. It automatically logs the user out when it initializes (ngOnInit) so the login page can also be used to logout.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000090","sortNo":60,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000091","sortNo":61,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Register Component Template</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000092","sortNo":62,"contentFormatId":"1","contentTxt":"Path: /app/register/register.component.html","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000093","sortNo":63,"contentFormatId":"1","contentTxt":"The register component template contains a simplae registration form with fields for first name, last name, username and password. It displays validation messages for invalid fields when the submit button is clicked. On submit the register() method is called if the form is valid.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000094","sortNo":64,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000095","sortNo":65,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Register Component</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000096","sortNo":66,"contentFormatId":"1","contentTxt":"Path: /app/register/register.component.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000097","sortNo":67,"contentFormatId":"1","contentTxt":"The register component has a single register() method that creates a new user with the user service when the register form is submitted.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000098","sortNo":68,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000099","sortNo":69,"contentFormatId":"1","contentTxt":"<strong>Angular 2 App Component Template</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000100","sortNo":70,"contentFormatId":"1","contentTxt":"Path: /app/app.component.html","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000101","sortNo":71,"contentFormatId":"1","contentTxt":"The app component template is the root component template of the application, it contains a router-outlet directive for displaying the contents of each view based on the current route, and an alert directive for displaying alert messages from anywhere in the system.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000102","sortNo":72,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000103","sortNo":73,"contentFormatId":"1","contentTxt":"<strong>Angular 2 App Component</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000104","sortNo":74,"contentFormatId":"1","contentTxt":"Path: /app/app.component.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000105","sortNo":75,"contentFormatId":"1","contentTxt":"The app component is the root component of the application, it defines the root tag of the app as <app></app> with the selector property.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000106","sortNo":76,"contentFormatId":"1","contentTxt":"The moduleId property is set to allow a relative path to be used for the templateUrl.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000107","sortNo":77,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000108","sortNo":78,"contentFormatId":"1","contentTxt":"<strong>Angular 2 App Module</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000109","sortNo":79,"contentFormatId":"1","contentTxt":"Path: /app/app.module.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000110","sortNo":80,"contentFormatId":"1","contentTxt":"The app module defines the root module of the application along with metadata about the module. For more info about angular 2 modules check out this page on the official docs site.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000111","sortNo":81,"contentFormatId":"1","contentTxt":"This is where the fake backend provider is added to the application, to switch to a real backend simply remove the providers located under the comment \"// providers used to create fake backend\".","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000112","sortNo":82,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000113","sortNo":83,"contentFormatId":"1","contentTxt":"<strong>Angular 2 App Routing</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000114","sortNo":84,"contentFormatId":"1","contentTxt":"Path: /app/app.routing.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000115","sortNo":85,"contentFormatId":"1","contentTxt":"The app routing file defines the routes of the application, each route contains a path and associated component. The home route is secured by passing the AuthGuard to the canActivate property of the route.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000116","sortNo":86,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000117","sortNo":87,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Main (Bootstrap) File</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000118","sortNo":88,"contentFormatId":"1","contentTxt":"Path: /app/main.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000119","sortNo":89,"contentFormatId":"1","contentTxt":"The main file is the entry point used by angular to launch and bootstrap the application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000120","sortNo":90,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000121","sortNo":91,"contentFormatId":"1","contentTxt":"<strong>source code</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000122","sortNo":92,"contentFormatId":"1","contentTxt":"<a href=\"https://github.com/cornflourblue/angular2-registration-login-example-webpack\">https://github.com/cornflourblue/angular2-registration-login-example-webpack</a>","contentBinary":"","contentPoster":"","contentUrl":null}]