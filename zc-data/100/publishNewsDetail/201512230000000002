[{"id":"201512230000000035","sortNo":1,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000191","sortNo":2,"contentFormatId":"1","contentTxt":"What’s NativeScript?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000192","sortNo":3,"contentFormatId":"1","contentTxt":"NativeScript is an open source JavaScript framework that lets you build native mobile apps from a single code base. NativeScript works by leveraging JavaScript virtual machines—e.g. JavaScriptCore and V8—to create a bridge between the JavaScript code you write and the native APIs used to drive the native application. As a quick example check out the following code:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000193","sortNo":4,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000194","sortNo":5,"contentFormatId":"1","contentTxt":"This is JavaScript code, yet NativeScript instantiates the Objective-C-based iOS UIAlertView control shown below:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000195","sortNo":6,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000196","sortNo":7,"contentFormatId":"1","contentTxt":"And because we know that no web developer wants to learn iOS- and Android-specific APIs like UIAlertView, we offer a large suite of JavaScript modules that abstract the iOS and Android details into simple-to-use JavaScript APIs. For instance, the UIAlertView-based code block above could be rewritten using the NativeScript dialogs module:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000197","sortNo":8,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000198","sortNo":9,"contentFormatId":"1","contentTxt":"This same dialogs.alert() call also gives you the following android.app.AlertDialog for your Android app:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000199","sortNo":10,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000200","sortNo":11,"contentFormatId":"1","contentTxt":"Although the dialog example is purposely simple, this same technique can be used to build incredibly robust and gorgeous apps, by utilizing the native iOS and Android UI components that are already available and mature. The best way to see what’s possible with NativeScript is to download our kitchen sink app on your iOS or Android device. You can also peruse our showcase page to see some of the many NativeScript-built apps in the app stores already.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000201","sortNo":12,"contentFormatId":"1","contentTxt":"Where does Angular come in?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000202","sortNo":13,"contentFormatId":"1","contentTxt":"One of our guiding principles when building NativeScript was to allow developers to leverage their existing skills. As such, NativeScript lets you write your app logic in JavaScript or TypeScript, style your app using a subset of CSS, leverage npm modules, and even use native iOS and Android libraries. So, it seemed logical for us to extend this skill reuse to another library developers know and love: Angular!","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000203","sortNo":14,"contentFormatId":"1","contentTxt":"At Telerik we’ve long been fans of Angular. We first shipped Angular integration in our popular Kendo UI library nearly two years ago, and we continue to see a ton of demand for Angular from our community. But integrating Angular 1 into NativeScript was impossible, as Angular 1 was tightly coupled to the DOM.... and in NativeScript there is no DOM or browser; NativeScript UIs are native UIs.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000204","sortNo":15,"contentFormatId":"1","contentTxt":"Enter Angular 2.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000205","sortNo":16,"contentFormatId":"1","contentTxt":"One of Angular 2’s biggest architectural changes was decoupling the Angular framework from the DOM. Whereas Angular 1 was limited to browser-based environments, Angular 2 opened the door a number of different rendering possibilities, including NativeScript. And since earlier this year, we’ve been holding weekly meetings with the Angular team to turn this vision into a reality.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000206","sortNo":17,"contentFormatId":"1","contentTxt":"How does it work?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000207","sortNo":18,"contentFormatId":"1","contentTxt":"If you know Angular 2, you already know a lot of what you need to know to use Angular 2 in NativeScript. The one big difference is that browser-based elements such as <div> and <span> are not available—instead, you must use NativeScript’s UI components to build your interfaces. Let’s look at an example.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000208","sortNo":19,"contentFormatId":"1","contentTxt":"NativeScript apps are primarily made up of three types of files: JavaScript or TypeScript files (for logic), XML files (for defining UI components), and CSS files (for styling). If you create one of each of these files with the same name—e.g. main.js, main.xml, and main.css—NativeScript knows to use the files as a unit. For instance, here’s the full code you need to build the dialog example presented earlier in this article—notice the use of `\"loaded\"` to tie the XML and JavaScript files together.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000209","sortNo":20,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000210","sortNo":21,"contentFormatId":"1","contentTxt":"Normally in a NativeScript app, your next step would be adding a bunch of UI components to your <page> in main.xml—components like <slider>, <switch>, and <tab-view>. But with Angular 2 in the picture you can build your UI using the Angular 2 component APIs. Here’s an updated version of main.js (this time built with TypeScript), that shows how to build a “Hello World” page with NativeScript and Angular 2. Look over the code below quickly, and then we’ll break it down in detail.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000211","sortNo":22,"contentFormatId":"1","contentTxt":"Note: Using Angular 2 in NativeScript currently requires TypeScript, which is why I’m writing the code below in TypeScript rather than JavaScript. In a future release we will remove this limitation and let you use JavaScript directly.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000212","sortNo":23,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000213","sortNo":24,"contentFormatId":"1","contentTxt":"If you’ve built anything with Angular 2 before most of this code will look familiar. There are really only two differences to note:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000214","sortNo":25,"contentFormatId":"1","contentTxt":"1. nativeScriptBootstrap() vs. bootstrap()","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000215","sortNo":26,"contentFormatId":"1","contentTxt":"In an Angular 2 web app, you call the bootstrap() function in the \"angular2/angular2\" module to initialize your components. In NativeScript apps you need to call nativeScriptBootstrap(), which is a lightweight wrapper of bootstrap() that does some NativeScript-specific initialization.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000216","sortNo":27,"contentFormatId":"1","contentTxt":"2. The UI components in the template","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000217","sortNo":28,"contentFormatId":"1","contentTxt":"In an Angular 2 web app your “Hello World” button example would probably be rendered as <div><button>Hello World</button></div>. But in NativeScript apps you need to use XML widgets that NativeScript is able to render in native mobile apps. This example uses a <stack-layout> element, which is the simplest of NativeScript’s layouts, and places a single <button> element within it. Here’s how those controls render on iOS and Android.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000218","sortNo":29,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000219","sortNo":30,"contentFormatId":"1","contentTxt":"What else can you do?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000220","sortNo":31,"contentFormatId":"1","contentTxt":"Once you have the basics down you can really start to leverage your existing web and Angular skills. For instance, want to change the look of your button? Just apply any of NativeScript’s supported CSS properties. For instance, if I add button { color: red; } to my app’s main.css file, I get a button that looks like this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000221","sortNo":32,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000222","sortNo":33,"contentFormatId":"1","contentTxt":"Want to add some behavior to the button? Just add a tap handler using Angular 2’s event binding mechanism. The following code alters the previous main.ts example to show an alert when the app’s button is tapped:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000223","sortNo":34,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000224","sortNo":35,"contentFormatId":"1","contentTxt":"There’s a whole lot more you can do in a NativeScript app—like using npm install to add JavaScript utility libraries to your app, installing NativeScript plugins to add some powerful native functionality, or trying out NativeScript’s rich animation APIs to move UI elements around the screen—but let’s take a minute to step back and consider why we’re taking this approach to building apps in the first place.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000225","sortNo":36,"contentFormatId":"1","contentTxt":"The benefits of using NativeScript and Angular 2","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000226","sortNo":37,"contentFormatId":"1","contentTxt":"The examples presented in this article have been purposely simple to introduce basic concepts, but think of how much work you’d have to do to build these simple Android and iOS apps using traditional native development approaches. For iOS you’d have to launch Xcode, drag a UIButton control onto a Storyboard, figure how to change that button’s text, and use outlets in Xcode to tie your button to an event handler written in Objective–C or Swift. On Android you’d have to figure out how to accomplish the same tasks in a completely different environment (Eclipse or Android Studio).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000227","sortNo":38,"contentFormatId":"1","contentTxt":"With NativeScript and Angular 2 you can build that same button in a few lines of code; you can write that code in JavaScript/TypeScript; you can place that button in an Angular 2 component; you can style that button with CSS; you can install JavaScript modules to help you out from npm; and at the end of the day you only have one code base to maintain. This is why we’re excited about NativeScript—it brings a familiar web tool set to the native app world.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000228","sortNo":39,"contentFormatId":"1","contentTxt":"And it gets even better. In addition to skill reuse—aka being able to write native apps with JavaScript—using Angular 2 in NativeScript opens up one other cool possibility: the ability to share code between your web and native apps. After all, NativeScript code is just JavaScript code, so as long as that code isn’t tied to the DOM, there’s no reason that code can’t run in NativeScript. And with Angular 2 support coming to NativeScript, you even have the potential to share your Angular components. Let’s look at an example.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000229","sortNo":40,"contentFormatId":"1","contentTxt":"Sharing code between web and mobile apps","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000230","sortNo":41,"contentFormatId":"1","contentTxt":"Suppose you need to write a simple checkbox component for your next Angular app. For your web app you might use the following TypeScript to implement the component:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000231","sortNo":42,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000232","sortNo":43,"contentFormatId":"1","contentTxt":"Above I define a component with a single checked input (or property) and a single click output (or event). I use Angular’s templateUrl option to define the component’s template in an external file named checkbox.html. That file contains the following HTML:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000233","sortNo":44,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000234","sortNo":45,"contentFormatId":"1","contentTxt":"Here’s where things get cool though. Now suppose that you want to make this component work on your NativeScript iOS and Android apps. What code would you have to change?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000235","sortNo":46,"contentFormatId":"1","contentTxt":"Only the template.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000236","sortNo":47,"contentFormatId":"1","contentTxt":"Seriously, that’s it. All you need to do is define how your component gets rendered on each platform—web and native. For instance, continuing the previous example, to get this code working in NativeScript you only need to swap out the contents of checkbox.html. The version of the template below uses the NativeScript <switch> widget:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000237","sortNo":48,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000238","sortNo":49,"contentFormatId":"1","contentTxt":"By using two different templates, your component can now render on three platforms—the web, iOS, and Android. Here’s what that looks like visually:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000239","sortNo":50,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000240","sortNo":51,"contentFormatId":"1","contentTxt":"It gets even better. NativeScript actually includes support for a few common web APIs, most notably XMLHttpRequest and fetch() This support means you can write your components for the web, and let NativeScript translate these APIs to native code for your mobile apps. As one example, because of NativeScript’s XMLHttpRequest support, Angular 2’s HTTP component works out of the box in NativeScript already. Here’s what that looks like visually:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000241","sortNo":52,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000242","sortNo":53,"contentFormatId":"1","contentTxt":"Obviously not all code makes sense to share across all platforms, and you’ll certainly want to fork your code in places to handle individual platforms separately. But at the very least NativeScript and Angular can help you share code for the mundane things in your app—such HTTP calls and model objects—and in certain cases you may want to share entire interfaces.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000243","sortNo":54,"contentFormatId":"1","contentTxt":"We’re excited about the potential this architecture provides to the Angular world, and we can’t wait to see what you build with it.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000244","sortNo":55,"contentFormatId":"1","contentTxt":"Awesome! When will this be ready?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000245","sortNo":56,"contentFormatId":"1","contentTxt":"Our Angular integration is currently in an alpha state, much like Angular 2 itself. If you’re the type of developer that likes digging in early, head to https://github.com/NativeScript/nativescript-angular and follow the instructions in the README to get up and running. You may also want to check out our TodoMVC example, or Sebastian Witalec’s presentation on NativeScript and Angular 2 from Angular Connect—each have more advanced examples of NativeScript and Angular 2 in action.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000246","sortNo":57,"contentFormatId":"1","contentTxt":"Long term, our Angular integration will roughly follow Angular 2’s own release schedule; therefore, you can expect a stable release of NativeScript’s Angular integration around Angular 2’s own stable release date.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000247","sortNo":58,"contentFormatId":"1","contentTxt":"But although NativeScript’s Angular integration is in an alpha state, NativeScript itself is a production-ready framework being used to develop a wide variety of apps today. If you’re interested in learning more, take an hour and go through the NativeScript getting started guide. You’ll build a functioning iOS and Android app, and learn whether NativeScript makes sense for your next development project.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000248","sortNo":59,"contentFormatId":"1","contentTxt":"If you want to keep up to date with the latest with our Angular integrations, bookmark our weekly meeting notes document, and follow @nativescript on Twitter for updates. If you’re looking for help, or want to chat with others in the NativeScript community, head over to our Google Group. Overall, we’re excited about bringing Angular 2 to a new mobile world, and we hope you are too.","contentBinary":"","contentPoster":"","contentUrl":null}]