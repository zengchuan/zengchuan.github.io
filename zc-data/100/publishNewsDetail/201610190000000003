[{"id":"201610190000000139","sortNo":1,"contentFormatId":"1","contentTxt":"Lazy loading speeds up our application load time by splitting it into multiple bundles, and loading them on demand. We designed the router to make lazy loading transparent, so you can opt in and opt out of lazy loading with ease.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000140","sortNo":2,"contentFormatId":"1","contentTxt":"The issue with lazy loading, of course, is that when the user navigates to the lazy-loadable section of the application, the router will have to fetch the required modules from the server, which can take time.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000141","sortNo":3,"contentFormatId":"1","contentTxt":"To fix this problem we have added support for preloading. Now the router can preload lazy-loadable modules in the background while the user is interacting with our application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000142","sortNo":4,"contentFormatId":"1","contentTxt":"This is how it works.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000143","sortNo":5,"contentFormatId":"1","contentTxt":"First, we load the initial bundle, which contains only the components we have to have to bootstrap our application. So it is as fast as it can be.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000144","sortNo":6,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000145","sortNo":7,"contentFormatId":"1","contentTxt":"Then, we bootstrap the application using this small bundle.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000146","sortNo":8,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000147","sortNo":9,"contentFormatId":"1","contentTxt":"At this point the application is running, so the user can start interacting with it. While she is doing it, we, in the background, preload other modules.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000148","sortNo":10,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000149","sortNo":11,"contentFormatId":"1","contentTxt":"Finally, when she clicks on a link going to a lazy-loadable module, the navigation is instant.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000150","sortNo":12,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000151","sortNo":13,"contentFormatId":"1","contentTxt":"We got the best of both worlds: the initial load time is as small as it can ben, and subsequent navigations are instant.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000152","sortNo":14,"contentFormatId":"1","contentTxt":"<strong>Enabling Preloading</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000153","sortNo":15,"contentFormatId":"1","contentTxt":"To enable preloading we need to pass a preloading strategy into forRoot.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000154","sortNo":16,"contentFormatId":"1","contentTxt":"The latest version of the router ships with two strategies: preload nothing and preload all modules, but you can provide you own. And it is actually a lot simpler that it may seem.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000155","sortNo":17,"contentFormatId":"1","contentTxt":"<strong>Custom Preloading Strategy</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000156","sortNo":18,"contentFormatId":"1","contentTxt":"Say we donâ€™t want to preload all the modules. Rather, we would like to say explicitly, in the router configuration, what should be preloaded.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000157","sortNo":19,"contentFormatId":"1","contentTxt":"We start with creating a custom preloading strategy.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000158","sortNo":20,"contentFormatId":"1","contentTxt":"The preload method takes two parameters: a route and the function that actually does the preloading. In it we check if the preload property is set to true. And if it is, we call the load function.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201610190000000159","sortNo":21,"contentFormatId":"1","contentTxt":"Finally, we need to enable the strategy by listing it as a provider and passing it to RouterModule.forRoot.","contentBinary":"","contentPoster":"","contentUrl":null}]