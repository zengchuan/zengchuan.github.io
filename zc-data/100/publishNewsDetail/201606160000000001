[{"id":"201606160000000001","sortNo":1,"contentFormatId":"1","contentTxt":"A long time ago we’ve written about routing in Angular 2 and you’ve probably noticed that this article is deprecated due to many changes and rewrites that happened in the router module of Angular 2. Just recently, the Angular team announced yet another version of the new router, in which they considered all the gathered feedback from the community to make it finally sophisticated enough, so it’ll fulfill our needs when we build applications with Angular 2.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000002","sortNo":2,"contentFormatId":"1","contentTxt":"In this article we want to take a first look at the new and better APIs, touching on the most common scenarios when it comes to routing. We’re going to explore how to define routes, linking to other routes, as well as accessing route parameters. Let’s jump right into it!","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000003","sortNo":3,"contentFormatId":"1","contentTxt":"<strong>Defining Routes</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000004","sortNo":4,"contentFormatId":"1","contentTxt":"Let’s say we want to build a contacts application (in fact, this is what we do in our Angular 2 Master Class). Our contacts application shows a list of contacts, which is our ContactsListComponent and when we click on a contact, we navigate to the ContactsDetailComponent, which gives us a detailed view of the selected contact.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000005","sortNo":5,"contentFormatId":"1","contentTxt":"A simplified version of ContactsListComponent could look something like this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000006","sortNo":6,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000007","sortNo":7,"contentFormatId":"1","contentTxt":"Let’s not worry about how ContactsListComponent gets hold of the contact data. We just assume it’s there and we generate a list using ngFor in the template.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000008","sortNo":8,"contentFormatId":"1","contentTxt":"ContactsDetailComponent displays a single contact. Again, we don’t want to worry too much about how this component is implemented yet, but a simplified version could look something like this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000009","sortNo":9,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000010","sortNo":10,"contentFormatId":"1","contentTxt":"Especially in ContactsDetailComponent there are a couple more things we need to consider when it comes to routing (e.g. how to link to that component, how to get access to URL parameters), but for now, the first thing we want to do is defining routes for our application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000011","sortNo":11,"contentFormatId":"1","contentTxt":"Defining routes is easy. All we have to do is to create a collection of Route which simply follows an object structure that looks like this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000012","sortNo":12,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000013","sortNo":13,"contentFormatId":"1","contentTxt":"As we can see, there are actually a couple more properties than just the three we show here. We’ll get to them later but this is all we need for now.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000014","sortNo":14,"contentFormatId":"1","contentTxt":"Routes are best defined in a separate module to keep our application easy to test and also to make them easier to reuse. Let’s define routes for our components in a new module (maybe contacts.routes.ts?) so we can add them to our application in the next step:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000015","sortNo":15,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000016","sortNo":16,"contentFormatId":"1","contentTxt":"Pretty straight forward right? You might notice that we use the index property on our first Route definition. This simply tells the router that this component should be loaded into the view by default (this is especially useful when dealing with child routes). The second route has a placeholder in its path called id. This allows us to have some dynamic value in our path which can later be accessed in the component we route to. Think of a contact id in our case, so we can fetch the contact object we want to display the details for.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000017","sortNo":17,"contentFormatId":"1","contentTxt":"The next thing we need to do is to make these routes available to our application. Angular takes advantage of its dependency injection system to make this work. The easiest way to make our routes available via DI is to import a function called provideRouter(routes: RouteConfig), which creates providers for us.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000018","sortNo":18,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000019","sortNo":19,"contentFormatId":"1","contentTxt":"If you’ve read our articles on Dependency Injection in Angular 2 you know that bootstrap() takes a list of providers as second argument. That’s all we do here.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000020","sortNo":20,"contentFormatId":"1","contentTxt":"You might wonder where ContactsAppComponent comes from. Well, this is just the root component we use to bootstrap our application. In fact, it doesn’t really know anything about our ContactsListComponent and ContactsDetailComponent. We’re going to take a look at ContactsAppComponent in the next step though.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000021","sortNo":21,"contentFormatId":"1","contentTxt":"<strong>Displaying loaded components</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000022","sortNo":22,"contentFormatId":"1","contentTxt":"Okay cool, our application now knows about these routes. The next thing we want to do is to make sure that the component we route to, is also displayed in our application. We still need to tell Angular “Hey, here’s where we want to display the thing that is loaded!”.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000023","sortNo":23,"contentFormatId":"1","contentTxt":"For that, we take a look at ContactsAppComponent:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000024","sortNo":24,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000025","sortNo":25,"contentFormatId":"1","contentTxt":"Nothing special going on there. However, we need to change that. In order to tell Angular where to load the component we route to, we need to use a directive called RouterOutlet. There are different ways to get hold of it, but the easiest is probably to import the ROUTER_DIRECTIVES, which is simply a predefined list of directives we can add to a component’s template like this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000026","sortNo":26,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000027","sortNo":27,"contentFormatId":"1","contentTxt":"We can now use all the directives that are exposed in that collection. That includes the RouterOutlet directive. Let’s add a <router-outlet> tag to our component’s template so that loaded components are displayed accordingly.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000028","sortNo":28,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000029","sortNo":29,"contentFormatId":"1","contentTxt":"Bootstrapping that app now displays a list of contacts! Awesome! The next thing we want to do is to link to ContactsDetailComponent when someone clicks on a contact.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000030","sortNo":30,"contentFormatId":"1","contentTxt":"<strong>Linking to other routes</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000031","sortNo":31,"contentFormatId":"1","contentTxt":"With the new router, there are different ways to route to other components and routes. The most straight forward way is to simply use strings, that represent the path we want to route to. We can use a directive called RouterLink for that. For instance, if we want to route to ContactsDetailComponent and pass the contact id 3, we can do that by simply writing:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000032","sortNo":32,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000033","sortNo":33,"contentFormatId":"1","contentTxt":"This works perfectly fine. RouterLink takes care of generating an href attribute for us that the browser needs to make linking to other sites work. And since we’ve already added ROUTER_DIRECTIVES to our ContactsAppComponent, we can simply go ahead and use that directive without further things to do.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000034","sortNo":34,"contentFormatId":"1","contentTxt":"While this is great we realise very quickly that this isn’t the optimal way to handle links, especially if we have dynamic values that we can only represent as expressions in our template. Taking a look at our ContactsListComponent template, we see that we’re iterating over a list of contacts:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000035","sortNo":35,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000036","sortNo":36,"contentFormatId":"1","contentTxt":"We need a way to evaluate something like {{contact.id}} to generate a link in our template. Luckily, RouterLink supports not only strings, but also expressions! As soon as we want to use expressions to generate our links, we have to use an array literal syntax in RouterLink.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000037","sortNo":37,"contentFormatId":"1","contentTxt":"Here’s how we could extend ContactsListComponent to link to ContactsDetailComponent:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000038","sortNo":38,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000039","sortNo":39,"contentFormatId":"1","contentTxt":"There are a couple of things to note here:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000040","sortNo":40,"contentFormatId":"1","contentTxt":"1. We use the bracket-syntax for RouterLink to make expressions work (if this doesn’t make sense to you, you might want to read out article on Angular 2’s Template Syntax Demystified","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000041","sortNo":41,"contentFormatId":"1","contentTxt":"2. The expression takes an array where the first field is the path we want to route to and the second a hash that fills the route parameters","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000042","sortNo":42,"contentFormatId":"1","contentTxt":"3. In order to use RouterLink in the template, we added ROUTER_DIRECTIVES to the component","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000043","sortNo":43,"contentFormatId":"1","contentTxt":"Cool! We can now link to ContactsDetailComponent. However, this is only half of the story. We still need to teach ContactsDetailComponent how to access the route parameters so it can use them to load a contact object.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000044","sortNo":44,"contentFormatId":"1","contentTxt":"<strong>Access Route Parameters</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000045","sortNo":45,"contentFormatId":"1","contentTxt":"A component that we route to has access to something that Angular calls the ActivatedRoute. An ActivatedRoute is an object that contains information about route parameters, query parameters and URL fragments. ContactsDetailComponent needs exactly that to get the id of a contact. We can inject the ActivatedRoute into ContactsDetailComponent, by using Angular’s DI like this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000046","sortNo":46,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000047","sortNo":47,"contentFormatId":"1","contentTxt":"ActivatedRoute comes with a params property which is an Observable. To access the contact id, all we have to do is to subscribe to the parameters Observable changes. Let’s say we have a ContactsService that takes a number and returns an observable that emits a contact object. Here’s what that could look like:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000048","sortNo":48,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606160000000049","sortNo":49,"contentFormatId":"1","contentTxt":"Of course, there’s way more to cover when it comes to routing. We haven’t talked about secondary routes or guards yet, but we’ll do that in our upcoming articles. Hopefully this one gives you an idea of what to expect from the new router. For a more in-depth article on the underlying architecture, you might want to read Victor’s awesome blog: angular-router.","contentBinary":"","contentPoster":"","contentUrl":null}]