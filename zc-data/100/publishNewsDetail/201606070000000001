[{"id":"201606070000000001","sortNo":1,"contentFormatId":"1","contentTxt":"In this article we will discuss how to combine socket.io with RxJs Observables in Angular 2.0.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000002","sortNo":2,"contentFormatId":"1","contentTxt":"We will implement a simple chat feature using socket based communication between client and server. Socket.io will take care of setting up the socket, but we will be using observables to receive and distribute chat messages from the server.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000003","sortNo":3,"contentFormatId":"1","contentTxt":"The goal is to build a chat server where we can open multiple browser windows and be able to send chat messages between the different browsers.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000004","sortNo":4,"contentFormatId":"1","contentTxt":"<strong>Server</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000005","sortNo":5,"contentFormatId":"1","contentTxt":"First we will define a simple server using nodeJs/express.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000006","sortNo":6,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000007","sortNo":7,"contentFormatId":"1","contentTxt":"The server is responsible for managing connections and notifying connected clients of new chat messages.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000008","sortNo":8,"contentFormatId":"1","contentTxt":"<strong>Client</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000009","sortNo":9,"contentFormatId":"1","contentTxt":"In order to open a channel between client and server we have to initiate a socket connection from the client.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000010","sortNo":10,"contentFormatId":"1","contentTxt":"We want to encapsulate the socket communication in an observable, so the first step is to create ChatService where we define our observable.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000011","sortNo":11,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000012","sortNo":12,"contentFormatId":"1","contentTxt":"The observable is configured to emit a value every time we receive a new chat message from the server. By calling observer.next(), subscribers to our observable will be notified of the new message.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000013","sortNo":13,"contentFormatId":"1","contentTxt":"We want to be able to disconnect from the chat, so our observable returns a subscription object that we can use to unsubscribe and break the connection.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000014","sortNo":14,"contentFormatId":"1","contentTxt":"Next we will create a component for the chat application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000015","sortNo":15,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000016","sortNo":16,"contentFormatId":"1","contentTxt":"The UI is simple with a just a textbox and a button. However, the important part to pay attention to is the subscription to the observable returned from chatService.getMessages().","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000017","sortNo":17,"contentFormatId":"1","contentTxt":"The observable will emit a new value for every new chat message and update our list of displayed messages.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000018","sortNo":18,"contentFormatId":"1","contentTxt":"Any message sent via the UI is distributed to all connected clients â€“ including the client who sent the message.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000019","sortNo":19,"contentFormatId":"1","contentTxt":"<strong>source code</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606070000000020","sortNo":20,"contentFormatId":"1","contentTxt":"<a href=\"https://github.com/thelgevold/rxjs-socket.io\">https://github.com/thelgevold/rxjs-socket.io</a>","contentBinary":"","contentPoster":"","contentUrl":null}]