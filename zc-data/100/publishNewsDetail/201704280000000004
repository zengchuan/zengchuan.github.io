[{"id":"201704280000000123","sortNo":1,"contentFormatId":"1","contentTxt":"In this post we'll cover how to implement modal windows (dialog boxes) in Angular 2 with TypeScript. The example is a custom modal without the need for any 3rd party libraries.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000124","sortNo":2,"contentFormatId":"1","contentTxt":"There are plenty of 3rd party libraries and plugins out there that include modal windows, up until recently I used them myself when I needed to add a modal to a project. The main issue that I have with 3rd party libraries is that they usually contain a lot of features I don't need which adds unnecessary bloat to my application, so last year I took some time and created a custom modal window in Angular 1 to see how difficult it would be and also to remove the mystery I had in my mind about exactly how modals work.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000125","sortNo":3,"contentFormatId":"1","contentTxt":"Once I'd finished I was surprised at the relatively small amount of code required to implement a custom modal window, most of the modal 'magic' is handled by a handful of css styles (see the modal.less file) while TypeScript is used for showing and hiding the modal windows.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000126","sortNo":4,"contentFormatId":"1","contentTxt":"<strong>Adding an Angular 2 Modal to your page</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000127","sortNo":5,"contentFormatId":"1","contentTxt":"Once you have the above three files (or the code from them) integrated into your project, you can add modals to your pages with the custom modal tag like this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000128","sortNo":6,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000129","sortNo":7,"contentFormatId":"1","contentTxt":"A unique id is required for each modal on a page, this is passed to the modal service from your controller to identify which modal you want to open/close.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000130","sortNo":8,"contentFormatId":"1","contentTxt":"The modal, modal-body and modal-background divs are required, but everything inside the modal-body can be changed. You could also update the modal LESS/CSS if you want to change the styles of the modals, e.g to make them smaller or add CSS transitions etc.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000131","sortNo":9,"contentFormatId":"1","contentTxt":"<strong>Opening & Closing Angular 2 Modals</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000132","sortNo":10,"contentFormatId":"1","contentTxt":"To open and close (show/hide) a modal dialog you need to use an instance of the ModalService by importing it into your controller, injecting it into the constructor and calling this.modalService.open() and this.modalService.close(), e.g:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000133","sortNo":11,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000134","sortNo":12,"contentFormatId":"1","contentTxt":"The example controller passes the modal id from the view, but it could also be set directly in the controller like this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000135","sortNo":13,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000136","sortNo":14,"contentFormatId":"1","contentTxt":"The view then calls the methods exposed by the controller in the usual way:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000137","sortNo":15,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000138","sortNo":16,"contentFormatId":"1","contentTxt":"<strong>Breakdown of the Angular 2 Custom Modal Code</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000139","sortNo":17,"contentFormatId":"1","contentTxt":"Below is a breakdown of the pieces of code used to implement the custom modal example in Angular 2, you don't need to know the details of how it all works to use the modals in your project, it's only if you're interested in the nuts and bolts or if you want to modify the code or behaviour.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000140","sortNo":18,"contentFormatId":"1","contentTxt":"<strong>LESS/CSS Styles for Angular 2 Modal</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000141","sortNo":19,"contentFormatId":"1","contentTxt":"These are the styles applied to the custom modals in this example, however they could also be used in non-angular2 projects as it's just pure LESS/CSS.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000142","sortNo":20,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000143","sortNo":21,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Modal Service</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000144","sortNo":22,"contentFormatId":"1","contentTxt":"The modal service manages the communication that's required between angular 2 controllers and modal directive instances. It maintains a current list of available modals on the page exposes methods for interacting with those modals.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000145","sortNo":23,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000146","sortNo":24,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Modal Directive Component</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000147","sortNo":25,"contentFormatId":"1","contentTxt":"The custom modal directive is used for adding modals anywhere in an angular application by using the <modal> tag. Each modal instance registers itself with the ModalService when it loads in order for the service to be able to open and close modal windows, and removes itself from the ModalService when it's destroyed using the ngOnDestroy event.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000148","sortNo":26,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000149","sortNo":27,"contentFormatId":"1","contentTxt":"<strong>source code</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000150","sortNo":28,"contentFormatId":"1","contentTxt":"<a href=\"https://github.com/cornflourblue/angular2-custom-modal-webpack\">https://github.com/cornflourblue/angular2-custom-modal-webpack</a>","contentBinary":"","contentPoster":"","contentUrl":null}]