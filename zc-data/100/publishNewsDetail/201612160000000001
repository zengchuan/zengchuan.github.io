[{"id":"201612160000000001","sortNo":1,"contentFormatId":"1","contentTxt":"<strong>Intro</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000002","sortNo":2,"contentFormatId":"1","contentTxt":"I am generally a positive person that endeavors to say nice things about people and frameworks. In the broadest sense, I love Angular, and it has been an amazing tool to build some really cool things. Angular 2 has exceeded my expectations in a lot of ways. But! There has always been some cognitive dissonance when it comes to the router in Angular 2. Its interesting history is no secret, and historically it has personally been a huge source of frustration for me. Having named outlets was something that I completely took for granted with UI-Router, and it drove me crazy that for the longest time, they just did not exist in Angular 2 and I wanted it! Well, dreams do come true! In the newest router, setting up named router outlets is a snap and in fact, they work pretty much exactly like unnamed router outlets. Please give Victor Savkin a hug next time you see him.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000003","sortNo":3,"contentFormatId":"1","contentTxt":"Our sample project allows us to see a list of speakers and their bios when you select on them. The speaker list and speaker bio components are mapped to two parallel named router outlets. Grab the sample project below and let’s go!","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000004","sortNo":4,"contentFormatId":"1","contentTxt":"Routing Module","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000005","sortNo":5,"contentFormatId":"1","contentTxt":"The first thing that we need to do when setting up routes for our project is to define the routing table. We will start out with a basic home route that maps to the HomeComponent and then add another route to redirect the root path to our home route.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000006","sortNo":6,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000007","sortNo":7,"contentFormatId":"1","contentTxt":"We will create another route that maps to our SpeakersComponent that has two children routes that we will use to introduce our named router outlets. Within the speakers route, we want to be able to display a list of speakers and the bio for the currently selected speaker. We accomplish this by adding in two child routes for the SpeakerListComponent and the BioComponent. Notice that both child routes follow the exact same structure as their parent route with the presence of a path and component property. The difference is that we have introduced an outlet property that we will use to map to a router-outlet in our template.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000008","sortNo":8,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000009","sortNo":9,"contentFormatId":"1","contentTxt":"The path for the bio outlet is :id which we will use to send in a route param to load in a specific speaker.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000010","sortNo":10,"contentFormatId":"1","contentTxt":"<strong>Router Outlet</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000011","sortNo":11,"contentFormatId":"1","contentTxt":"We are using an unnamed router outlet to load our home and speakers route as seen in the template below.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000012","sortNo":12,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000013","sortNo":13,"contentFormatId":"1","contentTxt":"In our SpeakersComponent template, we are going to do essentially the same thing but instead of one router outlet, we will use two. And so that the router can delineate what component goes into what outlet, we will add a name attribute that matches up to our routing table. The route with the list output will be loaded into the outlet named list and so on.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000014","sortNo":14,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000015","sortNo":15,"contentFormatId":"1","contentTxt":"<strong>Router Navigate</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000016","sortNo":16,"contentFormatId":"1","contentTxt":"So far this has been a fairly straightforward exercise in the universe matching up with what we expect to see. Things get a little more interesting when we want to navigate to parallel named router outlets.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000017","sortNo":17,"contentFormatId":"1","contentTxt":"We can navigate to a route within our template using the routerLink directive and if the route is static then we can simply pass in the value to the route we want to navigate to. Because we do not need to pass in an dynamic values to the home route, adding routerLink=”home” to our button will suffice.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000018","sortNo":18,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000019","sortNo":19,"contentFormatId":"1","contentTxt":"When a route needs to generate a dynamic URL, we can pass it an array of values that get mapped to the URL. In our case, when we go to the speakers route, we want to map our list outlet to the speakerList path and our bio outlet to have a path of none which evaluates to a speaker id of none.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000020","sortNo":20,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000021","sortNo":21,"contentFormatId":"1","contentTxt":"This will generate a URL that looks like this http://localhost:4200/speakers/(list:speakersList//bio:none) and looks like this in the application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000022","sortNo":22,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000023","sortNo":23,"contentFormatId":"1","contentTxt":"To navigate to a specific speaker, we will first add a click handler to our speakers list that calls showBio with the speaker.id.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000024","sortNo":24,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000025","sortNo":25,"contentFormatId":"1","contentTxt":"And within our SpeakersListComponent, we will call router.navigate to update our bio outlet with a path based on the id parameter.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000026","sortNo":26,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000027","sortNo":27,"contentFormatId":"1","contentTxt":"This will generate a URL that looks like this http://localhost:4200/speakers/(bio:1//list:speakersList) and looks like this in the application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000028","sortNo":28,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000029","sortNo":29,"contentFormatId":"1","contentTxt":"For reference, you can see the entire SpeakersListComponent below.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000030","sortNo":30,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000031","sortNo":31,"contentFormatId":"1","contentTxt":"<strong>Route Params</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000032","sortNo":32,"contentFormatId":"1","contentTxt":"We are successfully generating a URL that communicates appropriate paths to our named router outlets but how do we use that information to do something useful? We can use ActivatedRoute to get the route parameters off of the active route to perform logic within our components. In our case, we want to use the id parameter to retrieve the correct speaker information so that we can display it in our template. We can use Activated to get all sorts of useful information about the route loaded within a component but in our case, we are most interested in the params property. The params property is an observable that we can subscribe to that will give us the parameters that have been scoped to the current route.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000033","sortNo":33,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000034","sortNo":34,"contentFormatId":"1","contentTxt":"Within the subscribe method, we will use params.id to set this.currentSpeaker by calling this.service.getSpeakerByID.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000035","sortNo":35,"contentFormatId":"1","contentTxt":"For reference, you can see the entire BioComponent below.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000036","sortNo":36,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000037","sortNo":37,"contentFormatId":"1","contentTxt":"And just to wrap things up, within our BioComponent template, we are binding to currentSpeaker and using the safe navigation operator to keep our template stable when there isn’t a speaker selected.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000038","sortNo":38,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000039","sortNo":39,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000040","sortNo":40,"contentFormatId":"1","contentTxt":"<strong>Review</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000041","sortNo":41,"contentFormatId":"1","contentTxt":"And this is how we can have parallel, named router outlets within our Angular 2 application! I am so happy!","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000042","sortNo":42,"contentFormatId":"1","contentTxt":"Let’s do a quick recap of what we covered.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000043","sortNo":43,"contentFormatId":"1","contentTxt":"1. A named outlet route works just like an unnamed outlet route with the difference being the addition of the outlet property on the route definition.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000044","sortNo":44,"contentFormatId":"1","contentTxt":"2. We add a name property to the router-outlet element so the router knows where to load the component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000045","sortNo":45,"contentFormatId":"1","contentTxt":"3. When navigating to a route with named outlets, we need to add in an outlet object that defines the approprioate path for each outlet.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000046","sortNo":46,"contentFormatId":"1","contentTxt":"4. We can use Router.navigate to navigate to a route within our component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000047","sortNo":47,"contentFormatId":"1","contentTxt":"5. We can use ActivatedRoute to get route parameter values to perform logic within our component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000048","sortNo":48,"contentFormatId":"1","contentTxt":"<strong>source code</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612160000000049","sortNo":49,"contentFormatId":"1","contentTxt":"<a href=\"https://github.com/onehungrymind/ng2-named-router-outlets\">https://github.com/onehungrymind/ng2-named-router-outlets</a>","contentBinary":"","contentPoster":"","contentUrl":null}]