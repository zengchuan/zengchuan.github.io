[{"id":"201605270000000001","sortNo":1,"contentFormatId":"1","contentTxt":"A couple of days ago, I posted that I was going to start writing my Angular 2 demos using System.js and TypeScript. And, while I got something working, based on the Getting Started guide for Angular 2, it didn't really deliver a large portion of the value-add for TypeScript: type checking. Fortunately, Frank Wallis and Guy Bedford were most excellent enough to help me out and showed me how to enable type checking when using the in-browser TypeScript transpiling. I don't fully understand how all of this blood-magic works yet; but, I can see that type checking is, indeed, happening in the browser.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000002","sortNo":2,"contentFormatId":"1","contentTxt":"To get type checking working with the in-browser TypeScript transpiling, I had to update my tsconfig.json file to enable the \"typeCheck\" option:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000003","sortNo":3,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000004","sortNo":4,"contentFormatId":"1","contentTxt":"Then, I had to update my system.config.js file to tell System.js where to find the TypeScript definition files for the various *.js modules (RxJS and the Angular 2 modules):","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000005","sortNo":5,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000006","sortNo":6,"contentFormatId":"1","contentTxt":"In the System.import() promise chain, you'll notice that I'm explicitly invoking the TypeScript plugin's .bundle() method. At the time of this writing, I don't know exactly what that does. Looking through the plugin source code, it seems that .bundle() forces type-checking to be performed on the syntax tree of the loaded components. But, the truth is, the demo works with or without this portion of the code. That said, I'm leaving it in for the time being since I don't truly understand what it does.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000007","sortNo":7,"contentFormatId":"1","contentTxt":"The moment I enabled this, I actually found 2 different type problems with my previous demo (which I outlined in the comments of that post). This goes to show you how important type checking is (if you're going to use it).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000008","sortNo":8,"contentFormatId":"1","contentTxt":"Once I had this type checking enabled, I went about updating my demo to use better typing. First, let's look at the FriendService since this is where the data comes from. You'll notice that I've add a Friend interface (for the JSON payload) and I've updated my method signatures to incorporate this type:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000009","sortNo":9,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000010","sortNo":10,"contentFormatId":"1","contentTxt":"Notice that even the Observable signature includes this new Friend type.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000011","sortNo":11,"contentFormatId":"1","contentTxt":"Then, I updated my AppComponent to consume these new type annotations:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000012","sortNo":12,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000013","sortNo":13,"contentFormatId":"1","contentTxt":"If you run this demo, everything works as expected. But, the beautiful part is that if I go in and start messing with the type annotations, such that types don't line up, the in-browser transpiler and type checker will throw an error. For example, if I go into the FriendService and change the unwrapResolve() method signature from:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000014","sortNo":14,"contentFormatId":"1","contentTxt":"private unwrapResolve( response: Response ) : Friend[]","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000015","sortNo":15,"contentFormatId":"1","contentTxt":"to:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000016","sortNo":16,"contentFormatId":"1","contentTxt":"private unwrapResolve( response: Response ) : string[]","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000017","sortNo":17,"contentFormatId":"1","contentTxt":"running the demo will result in the following TypeScript error: TypeScript Type 'Observable<string[]>' is not assignable to type 'Observable<Friend[]>'.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000018","sortNo":18,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201605270000000019","sortNo":19,"contentFormatId":"1","contentTxt":"Enabling type checking for the in-browser TypeScript transpiler definitely has overhead. It loads about twice as many JavaScript files and it takes noticeably longer for the page to load (especially in Firefox). But, these are just demos; and for me, learning about TypeScript and proper type usage is more important than a fast page load time.","contentBinary":"","contentPoster":"","contentUrl":null}]