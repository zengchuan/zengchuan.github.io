[{"id":"201704280000000018","sortNo":1,"contentFormatId":"1","contentTxt":"In this post I'll show you how to redirect a user back to their originally requested url / route after logging into an Angular 2 application, this is done with the help of an Auth Guard and a Login Component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000019","sortNo":2,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Auth Guard</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000020","sortNo":3,"contentFormatId":"1","contentTxt":"Guards in Angular 2 are used to protect routes, there are a few different guard types depending on the specific behaviour you want to implement, in this example I'm using a CanActivate guard which implements a single canActivate() method that enables you to check if a route can be activated or not, which in this case is if the user is authenticated or not.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000021","sortNo":4,"contentFormatId":"1","contentTxt":"The example Auth Guard checks to see if the user is authenticated by simply checking if there's a 'currentUser' object in local storage, if there is it returns true which passes the CanActivate Guard, otherwise it returns false which fails the CanActivate Guard and prevents the route from being activated.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000022","sortNo":5,"contentFormatId":"1","contentTxt":"If the user isn't authenticated, the auth guard also redirects them to the '/login' route and includes the original (previous) url in the 'returnUrl' parameter. The original url is accessible in the auth guard via the 'state: RouterStateSnapshot' parameter that is passed to the canActivate() method.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000023","sortNo":6,"contentFormatId":"1","contentTxt":"Auth Guard that passes original URL to login component","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000024","sortNo":7,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000025","sortNo":8,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Login Component</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000026","sortNo":9,"contentFormatId":"1","contentTxt":"The login component is a standard Angular 2 'controller' component that implements the behaviour for a login form.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000027","sortNo":10,"contentFormatId":"1","contentTxt":"In the ngOnInit() method the component gets the original url that was passed from the Auth Guard as a route parameter and stores it in the local returnUrl property, if the original url is empty the returnUrl defaults to the home page route ('/'). Parameters for the current route are accessible via the 'private route: ActivatedRoute' property that's injected in the component constructor.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000028","sortNo":11,"contentFormatId":"1","contentTxt":"In the login() method the component uses the authenticationService to authenticate the username and password, on successful login the user is redirected to the returnUrl. For more details on the authentication service go to the user registraion and login example link at the top of the post.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000029","sortNo":12,"contentFormatId":"1","contentTxt":"Login Component that redirects to the previous / original URL after login","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201704280000000030","sortNo":13,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null}]