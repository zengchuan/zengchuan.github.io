[{"id":"201609220000000005","sortNo":1,"contentFormatId":"1","contentTxt":"The @NgModule is a new decorator that has recently been added in Angular 2. NgModule defines an Angular Module, which (from the official docs) are defined as \"Angular Modules help organize an application into cohesive blocks of functionality.\"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000006","sortNo":2,"contentFormatId":"1","contentTxt":"This post introduces @NgModule and its most oft used features when creating a root module. Angular Modules can also assist with separation of features, and eager and lazy loading of those features. I'll explore these in future posts, but first we must grasp the basics and create a simple root module.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000007","sortNo":3,"contentFormatId":"1","contentTxt":"<strong>Simple Root Module</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000008","sortNo":4,"contentFormatId":"1","contentTxt":"We use an Angular Module as the starting point for our applications. When we decorate a class with @NgModule we are telling Angular important information about this Angular Module's role.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000009","sortNo":5,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000010","sortNo":6,"contentFormatId":"1","contentTxt":"First, we declare that the AppComponent belongs to the AppModule by setting the AppComponent in the declarations property. Our AppComponent may have a selector of my-app. When Angular sees my-app in the template it will now recognize it.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000011","sortNo":7,"contentFormatId":"1","contentTxt":"Every app starts somewhere. By convention our apps start at AppModule. This is our root module and thus we advise Angular that when it creates AppModule at start that we want to bootstrap AppComponent into the DOM.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000012","sortNo":8,"contentFormatId":"1","contentTxt":"We import modules that our Angular Modules will use. In the example above we import the BrowserModule which registers important application service providers for running in the browser. BrowserModule includes built-in directives like NgIf and NgFor. This means we can use these built-in directives in any of this module's component templates.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000013","sortNo":9,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000014","sortNo":10,"contentFormatId":"1","contentTxt":"<strong>Bootstrapping our App</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000015","sortNo":11,"contentFormatId":"1","contentTxt":"We start our applications using main.ts, file by convention (see the style guide).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000016","sortNo":12,"contentFormatId":"1","contentTxt":"The example below shows how we will bootstrap AppModule using the browser platform. Again, by convention, we name the AppModule file app.module.ts.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000017","sortNo":13,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000018","sortNo":14,"contentFormatId":"1","contentTxt":"This uses the Just in Time (JIT) compilation. We can use Ahead of Time (AOT), but that is a topic for a future post.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000019","sortNo":15,"contentFormatId":"1","contentTxt":"<strong>Declaring</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000020","sortNo":16,"contentFormatId":"1","contentTxt":"We create custom components, directives and pipes in our application. We can tell Angular that this module will use these by declaring the in the @NgModule declarations property.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000021","sortNo":17,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000022","sortNo":18,"contentFormatId":"1","contentTxt":"<strong>Imports</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000023","sortNo":19,"contentFormatId":"1","contentTxt":"We imported BrowserModule, which itself imports the CommonModule which contains the common built-in directives such as NgIf and NgFor. By importing BrowserModule, we in turn get what CommonModule has to offer too.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000024","sortNo":20,"contentFormatId":"1","contentTxt":"What if we want to use form functionality such as ngModel or http? We can import those modules, too. This makes these features available in or AppModule.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000025","sortNo":21,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000026","sortNo":22,"contentFormatId":"1","contentTxt":"Now that we have imported FormsModule, we can use ngModel in our templates. When we use http to get or post data since we imported HttpModule.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000027","sortNo":23,"contentFormatId":"1","contentTxt":"<strong>Providers</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000028","sortNo":24,"contentFormatId":"1","contentTxt":"We often have services that we want to share within our app. How do we allow all of our components to use a service? We use Angular Modules.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000029","sortNo":25,"contentFormatId":"1","contentTxt":"We can add add providers to the application's root dependency injector in our AppModule. Since our AppModule is our root module, this will make the services available everywhere in the application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000030","sortNo":26,"contentFormatId":"1","contentTxt":"Some ideal examples of services we want to make available across the board are be a user profile service or a logging service. Our app also shows a list of vehicles, so we might have a VehicleService to retrieve those using http (which we can use because we imported the HttpModule).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000031","sortNo":27,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000032","sortNo":28,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000033","sortNo":29,"contentFormatId":"1","contentTxt":"When we provide these services to the AppModule they are available to our declared components.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000034","sortNo":30,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000035","sortNo":31,"contentFormatId":"1","contentTxt":"When a component tries to inject a service in its constructor, it is asking Angular to find that service. In this sample with our root app module, Angular first looks in this component's (VehicleListComponent) injector for our service. Since we did not provide the service in the @Component decorator's providers property, Angular keeps going up the component tree until it finds the service. We never provided it in a component, so it ultimately looks in its root injector and finds our service. If the service has already been instantiated, we get that service instance. If not, a new instance is created. This is how we locate and inject services.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000036","sortNo":32,"contentFormatId":"1","contentTxt":"Providers are perhaps one of the most involved and challenging Angular Module concepts. For a general rule of thumb, provide services you intend to be shared across your app, as a single multi-use instance, in the app root module.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000037","sortNo":33,"contentFormatId":"1","contentTxt":"<strong>What Else?</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609220000000038","sortNo":34,"contentFormatId":"1","contentTxt":"Using these concepts we can get started with Angular Modules. But when our app grows, how do we know when and where to create new Angular Modules for our feature areas? How do they related to one another? How do we make sure services are instantiated as singletons or multiple instances? How do we decide if code should be eager or lazy loaded? These are topics for future posts now that we know basic building blocks of Angular Modules.","contentBinary":"","contentPoster":"","contentUrl":null}]