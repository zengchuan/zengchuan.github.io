[{"id":"201701220000000011","sortNo":1,"contentFormatId":"1","contentTxt":"In simple terms, modules are the basic building blocks of our Angular 2 application, whereas routes provide us with paths to point to specific parts of our application. These are both core to an Angular 2 application. It is important to create both with good, clean separation of concerns in mind.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000012","sortNo":2,"contentFormatId":"1","contentTxt":"<strong>Routes</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000013","sortNo":3,"contentFormatId":"1","contentTxt":"A standard application has different layers of components (or functionality) that the user can navigate to. This is where our routes come into play. These routes provide url paths to direct us to these different parts of the apps functionality.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000014","sortNo":4,"contentFormatId":"1","contentTxt":"Say we are creating an application that displays a list whiskeys. When the user clicks on a whiskey in the list, we want to display a page showing the detailed information about that whiskey. That’s just one piece of the application. How about the user wants to search for a whiskey he has previously purchased? That’s another piece of similar functionality. Because these components are closely associated with each other in terms of purpose,  it makes sense to create relevant routes in the same folder.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000015","sortNo":5,"contentFormatId":"1","contentTxt":"As a project of reference, I will be referring to my Whiskey shop application for example of the structure of its project directory. I hope to fully publish this within the next few weeks.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000016","sortNo":6,"contentFormatId":"1","contentTxt":"So for a basic application, we can just declare all these routes in our app.module.ts file (Our entry point for the application) . But what about more expansive applications with many different components to be directed to? We can then create a routing TypeScript file specific to a folder of similar components. This creates a routing system that is compartmentalized rather than declared in the one place.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000017","sortNo":7,"contentFormatId":"1","contentTxt":"For instance, say we have an actions folder containing a login, register and profile component. We can then create an  actions.routing.ts file which contains the relevant route paths.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000018","sortNo":8,"contentFormatId":"1","contentTxt":"Actions Folder Example","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000019","sortNo":9,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000020","sortNo":10,"contentFormatId":"1","contentTxt":"Actions Routing File Declared Roots","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000021","sortNo":11,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000022","sortNo":12,"contentFormatId":"1","contentTxt":"From here, we can export this routing file and include it in our App modules component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000023","sortNo":13,"contentFormatId":"1","contentTxt":"<strong>Modules</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000024","sortNo":14,"contentFormatId":"1","contentTxt":"A module provides meta data for a particular section of your application. It is then exported and can be accessed by another component by importing it. This imports/exports system is made possible through TypeScript syntax.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000025","sortNo":15,"contentFormatId":"1","contentTxt":"The process of importing classes/components into other classes and components closely resembles something from Object Oriented languages Java, C# etc.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000026","sortNo":16,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000027","sortNo":17,"contentFormatId":"1","contentTxt":"./ in an angular import means current directory. This is obviously something you’d be aware of while making an Angular 2 application but its nice to be reminded due to the amount of time you can waste trying to get the correct directory path.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000028","sortNo":18,"contentFormatId":"1","contentTxt":"By declaring similar components in the same module you get to have a cleaner components and separated logic. You can declare all imports that are relevant to those modules.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000029","sortNo":19,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000030","sortNo":20,"contentFormatId":"1","contentTxt":"So as you can see we have consolidated some of our modules into groups. Our LayoutModule and ActionsModule contains more than one referenced component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000031","sortNo":21,"contentFormatId":"1","contentTxt":"For example our LayoutModule contains all of the following modules from our layout folder. Just to note the layout folder is just name I gave the folder in this instance and is not an Angular 2 specific structure recommendation.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000032","sortNo":22,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000033","sortNo":23,"contentFormatId":"1","contentTxt":"The components from this layout folder (FooterComponent, HeaderComponent, NavigationComponent) were declared and exported here:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000034","sortNo":24,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000035","sortNo":25,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000036","sortNo":26,"contentFormatId":"1","contentTxt":"This enables our app.module.ts file to be significantly cleaner because we don’t have to declare each individual component that we have in our application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000037","sortNo":27,"contentFormatId":"1","contentTxt":"Another advantage of these components segmented by similar functionality  is the ability to remove one from declarations if the developer wants to stop the use of certain piece of that particular functionality.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000038","sortNo":28,"contentFormatId":"1","contentTxt":"So just to reiterate we should assort all our module providers routes in RouterModule Object specific to that group.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000039","sortNo":29,"contentFormatId":"1","contentTxt":"We also no longer have to declare our routes here as we have our routes declared in our specific group components.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000040","sortNo":30,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000041","sortNo":31,"contentFormatId":"1","contentTxt":"It is also regarded as good practice to separate your routes specific to what folders they are grouped in.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000042","sortNo":32,"contentFormatId":"1","contentTxt":"This allows you to have an Angular 2 application’s app.module file to not be overloaded with path references linking to different areas of your application. Instead, these routes will be located in a location thats relevant to the components it links to.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000043","sortNo":33,"contentFormatId":"1","contentTxt":"Our application is now nearly completely compartmentalized through the grouping of our modules and routes. Different types of functionality can now be targeted and contained within these groups.","contentBinary":"","contentPoster":"","contentUrl":null}]