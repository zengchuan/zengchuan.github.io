[{"id":"201604080000000087","sortNo":1,"contentFormatId":"1","contentTxt":"In this lesson, we are going to expand on the idea of composition through components by introducing subcomponents. Angular 2 components, by nature, offer a consistent experience; which means that this will seem more like we are reinforcing existing concepts as opposed to throwing new-fangled monkey wrenches into the mix. This is good! My personal experience is that Angular 2 is much easier to learn because the Angular team has distilled AngularJS 1 best practices into a much simpler, less nuanced framework.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000088","sortNo":2,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000089","sortNo":3,"contentFormatId":"1","contentTxt":"We are going to enhance the Experiments component by adding in an ExperimentDetails subcomponent to encapsulate the details of a single experiment. Along the way, we will build out the service to provide us with the experiments collection, build out the Experiment interface and, most importantly, show how to include the ExperimentDetails component in our Experiments component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000090","sortNo":4,"contentFormatId":"1","contentTxt":"Starting Point","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000091","sortNo":5,"contentFormatId":"1","contentTxt":"We are going to use the code below as our starting point. If you read the first post in the series, the code below should be relatively familiar. In a nutshell, we have an Experiments component that is targeting the experiments element and using experiments.component.html as its template. We are injecting the StateService into our component via its constructor and then using the ngOnInit lifecycle hook to pull the message from the service.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000092","sortNo":6,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000093","sortNo":7,"contentFormatId":"1","contentTxt":"At this point, the home, about and experiments features are almost identical and the perfect starting point for digging into subcomponents.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000094","sortNo":8,"contentFormatId":"1","contentTxt":"Getting the Experiments","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000095","sortNo":9,"contentFormatId":"1","contentTxt":"To display a list of experiments, we need to create a service to provide us with the appropriate collection. We are going to create a class called ExperimentsService that exposes a method called getExperiments, which returns an array of experiment objects.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000096","sortNo":10,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000097","sortNo":11,"contentFormatId":"1","contentTxt":"Two of the main features of TypeScript are the ability to make members of a class private with the private modifier as well as declare data types. These features are not mandatory, and you can use them to whatever degree you are comfortable. Here are a few variations that we could have used to define our experiments collection.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000098","sortNo":12,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000099","sortNo":13,"contentFormatId":"1","contentTxt":"How does TypeScript even know what an Experiment is so that it can enforce that type on the array? Notice in the code below that we are importing in an Experiment module that grants us access to the Experiment type.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000100","sortNo":14,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000101","sortNo":15,"contentFormatId":"1","contentTxt":"But what is it, man!? Okay! We have created an interface that allows us to define the “shape” of how an Experiment should look. By declaring our interface, TypeScript knows how to type check an object against its intended shape.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000102","sortNo":16,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000103","sortNo":17,"contentFormatId":"1","contentTxt":"Now that we have created ExperimentsService and Experiment, we are now ready to integrate with our Experiments component. We are going to import our two new modules.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000104","sortNo":18,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000105","sortNo":19,"contentFormatId":"1","contentTxt":"We will then define an experiments collection with a typed Experiment array. We are going to inject ExperimentsService into our component in the constructor function just like we did with the StateService. To complete the circuit, we will populate our experiments collection by calling this._ExperimentsService.getExperiments() from the ngOnInit method.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000106","sortNo":20,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000107","sortNo":21,"contentFormatId":"1","contentTxt":"Now that we have our experiments, it is time for us to do something with them.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000108","sortNo":22,"contentFormatId":"1","contentTxt":"Displaying the Experiments","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000109","sortNo":23,"contentFormatId":"1","contentTxt":"We are now going to create the experiment detail component, and I want you to be mindful of how many of the steps are familiar. We will start out by creating the class for our components and calling it ExperimentDetailComponent.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000110","sortNo":24,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000111","sortNo":25,"contentFormatId":"1","contentTxt":"Then we will import our modules.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000112","sortNo":26,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000113","sortNo":27,"contentFormatId":"1","contentTxt":"And then we are going to decorate the class to target the experiment element and use the experiment.detail.component.html template.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000114","sortNo":28,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000115","sortNo":29,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000116","sortNo":30,"contentFormatId":"1","contentTxt":"We are now going to enhance our basic class to do actual work. Notice in the code above that we are importing the Component module and then annotating our class with @Component(). Leading question alert! If we are also importing the Input module, would it not be reasonable to expect to see something like @Input() somewhere in our code? Why yes! Yes, it would!","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000117","sortNo":31,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000118","sortNo":32,"contentFormatId":"1","contentTxt":"In Angular 2, @Input declares a data-bound property so that it is automatically updated during change detection. This is very similar, albeit much simpler, to isolated scope in Angular 1.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000119","sortNo":33,"contentFormatId":"1","contentTxt":"Our experiment detail template is comprised mostly of classic curly brace data binding with the exception of our (click) handler which we use to call doExperiment.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000120","sortNo":34,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000121","sortNo":35,"contentFormatId":"1","contentTxt":"Our ExperimentDetailComponent is complete, and it is now time to integrate it into our ExperimentsComponent.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000122","sortNo":36,"contentFormatId":"1","contentTxt":"Experiments Meet ExperimentsDetail","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000123","sortNo":37,"contentFormatId":"1","contentTxt":"We will update our imports to include ExperimentDetailComponent.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000124","sortNo":38,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000125","sortNo":39,"contentFormatId":"1","contentTxt":"This is important! For us to use a subcomponent within a parent component, we have to define it in the directives property on our component annotation. Emphasis added to the previous statement because I have wasted a bunch of time by spacing out that critical step.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000126","sortNo":40,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000127","sortNo":41,"contentFormatId":"1","contentTxt":"Angular 2 Template Primer","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000128","sortNo":42,"contentFormatId":"1","contentTxt":"Home stretch! We need to update our HTML to render the experiment subcomponent. All of this happens in a single line of code that, as we can see below, is quite dense.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000129","sortNo":43,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000130","sortNo":44,"contentFormatId":"1","contentTxt":"Let’s break this down. First things first, we want to render the ExperimentDetailComponent and so we will add this experiment selector to our page.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000131","sortNo":45,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000132","sortNo":46,"contentFormatId":"1","contentTxt":"We want to render a bunch of experiment components, and so we will use ngFor to repeat over our experiments collection and stamp out N number of elements. In Angular 2, we use ngFor much like we used ngRepeat in Angular 1.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000133","sortNo":47,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000134","sortNo":48,"contentFormatId":"1","contentTxt":"There are two things that I would like to call out; these are new additions to the Angular templating that will seem “odd” at first. The first oddity is the asterisk that we see in front of ngFor. This is a shorthand way for us to work with directives that modify the DOM. Angular sees the asterisk and knows to expand the HTML into whatever defined as our template. The oddity is the pound sign (#) in #experiment. This indicates that we are creating a local template variable called experiment that we can reference later.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000135","sortNo":49,"contentFormatId":"1","contentTxt":"Remember that one really funny time when we used @Input on that one component? You know!? That ONE time! It looked like this @Input() experiment: Experiment;. We are now going to make use of that by adding a property binding in the form of [experiment] to our element and then setting the value to the local template variable experiment we created in our ngFor loop.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000136","sortNo":50,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000137","sortNo":51,"contentFormatId":"1","contentTxt":"One line of code and yet so many important things are happening when we stop and think about it. And there you have it! We have successfully created and integrated a subcomponent into our app.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000138","sortNo":52,"contentFormatId":"1","contentTxt":"Review","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000139","sortNo":53,"contentFormatId":"1","contentTxt":"Let’s do a quick review of what we covered in this post.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000140","sortNo":54,"contentFormatId":"1","contentTxt":"1. To make a service injectable, we annotate our class with @Injectable.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000141","sortNo":55,"contentFormatId":"1","contentTxt":"2. To make a component, we annotate our class with @Component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000142","sortNo":56,"contentFormatId":"1","contentTxt":"3. To make a property bindable, we annotate our property with @Input.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000143","sortNo":57,"contentFormatId":"1","contentTxt":"4. We can use the private modifier in TypeScript to restrict access to class members.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000144","sortNo":58,"contentFormatId":"1","contentTxt":"5. We can use TypeScript interfaces to define the shape of an object and provide richer typing.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000145","sortNo":59,"contentFormatId":"1","contentTxt":"6. We must add our subcomponents to the directives array in our @component annotation.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000146","sortNo":60,"contentFormatId":"1","contentTxt":"7. The asterisk (*) is a shorthand method to work with directives that modify the DOM by inserting templates.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000147","sortNo":61,"contentFormatId":"1","contentTxt":"8. The pound sign (#) is used to denote a local template variable.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000148","sortNo":62,"contentFormatId":"1","contentTxt":"9. Double brackets ([]) binds an element property to an expression.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000149","sortNo":63,"contentFormatId":"1","contentTxt":"10. At the risk of an oversimplification, ngFor is the new ngRepeat.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000150","sortNo":64,"contentFormatId":"1","contentTxt":"Thanks for joining me as we built out an Angular 2 subcomponent. I have a few ideas for what I want to tackle next in this series but let me know what you would like to see in the comments below. #highFive","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000151","sortNo":65,"contentFormatId":"1","contentTxt":"source code:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604080000000152","sortNo":66,"contentFormatId":"1","contentTxt":"<a href=\"https://github.com/simpulton/angular2-website-routes\">https://github.com/simpulton/angular2-website-routes</a>","contentBinary":"","contentPoster":"","contentUrl":null}]