[{"id":"201604120000000043","sortNo":1,"contentFormatId":"1","contentTxt":"In this article I will show how to create a lazy loaded treeview using RxJs Observables.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000044","sortNo":2,"contentFormatId":"1","contentTxt":"In a previous article we discussed how to create a recursive treeview from an object model. Since then a lot of people have asked me extend this idea to lazy load the treeview from an api.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000045","sortNo":3,"contentFormatId":"1","contentTxt":"I figured this would be a good opportunity to play around with some RxJs and Redux, so I decided to go ahead and build one.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000046","sortNo":4,"contentFormatId":"1","contentTxt":"Even though I've been saying it for a while now, I am still learning about RxJs and Redux, so any feedback on the approach is appreciated.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000047","sortNo":5,"contentFormatId":"1","contentTxt":"I start by creating a treeview component (TreeView) with a basic template.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000048","sortNo":6,"contentFormatId":"1","contentTxt":"The component subscribes to an observable that will start pumping out tree nodes when a node is expanded.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000049","sortNo":7,"contentFormatId":"1","contentTxt":"Component","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000050","sortNo":8,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000051","sortNo":9,"contentFormatId":"1","contentTxt":"Template","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000052","sortNo":10,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000053","sortNo":11,"contentFormatId":"1","contentTxt":"Store","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000054","sortNo":12,"contentFormatId":"1","contentTxt":"Let's take a look at the store","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000055","sortNo":13,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000056","sortNo":14,"contentFormatId":"1","contentTxt":"When a node is expanded my store will make an http request and store the result internally in the store. Before persisting state I pass the response through a reducer to produce view models for the view.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000057","sortNo":15,"contentFormatId":"1","contentTxt":"The treeNodeReducer is currently super simple with nothing more than a mapping from the api response to TreeNode models.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000058","sortNo":16,"contentFormatId":"1","contentTxt":"Reducer","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000059","sortNo":17,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000060","sortNo":18,"contentFormatId":"1","contentTxt":"TreeNode model","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000061","sortNo":19,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000062","sortNo":20,"contentFormatId":"1","contentTxt":"The idea is that state will only be persisted in the store and data will flow to the treeview via RxJs observables.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000063","sortNo":21,"contentFormatId":"1","contentTxt":"I can't create the observables ahead of time since the tree data is not known. Instead the observables are created on the fly when data comes back from the api. Basically each expanded node has its own observable for delivering data.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000064","sortNo":22,"contentFormatId":"1","contentTxt":"The store caches the data, so if a node is expanded again, the data is loaded from cache.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000065","sortNo":23,"contentFormatId":"1","contentTxt":"My store exposes a dispatchAction method for passing actions to the store. Currently there is only support for loading actions, but I might add support for adding nodes later.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000066","sortNo":24,"contentFormatId":"1","contentTxt":"TreeNodeService","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000067","sortNo":25,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000068","sortNo":26,"contentFormatId":"1","contentTxt":"In my demo application I have created a hierarchy of a few geographical locations. The data for the treeview is loaded by on demand as the user expands nodes.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000069","sortNo":27,"contentFormatId":"1","contentTxt":"The final tree looks like this.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000070","sortNo":28,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000071","sortNo":29,"contentFormatId":"1","contentTxt":"source code:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000072","sortNo":30,"contentFormatId":"1","contentTxt":"<a href=\"https://github.com/thelgevold/angular-2-samples/tree/master/components/lazy-loaded-tree-view\">https://github.com/thelgevold/angular-2-samples/tree/master/components/lazy-loaded-tree-view</a>","contentBinary":"","contentPoster":"","contentUrl":null}]