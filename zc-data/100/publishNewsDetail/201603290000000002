[{"id":"201603290000000026","sortNo":1,"contentFormatId":"1","contentTxt":"This article shows how Angular 2 child routing can be set up together with Angular 2 components. An Angular 2 component can contain it’s own routing, which makes it easy to reuse or test the components in an application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000027","sortNo":2,"contentFormatId":"1","contentTxt":"An Angular 2 app bootstraps a single main component and the routing is usually defined in this component. To use Angular 2 routing, ‘angular2/router’ is imported. The child routing is set up using “/…” and is defined in the @RouteConfig which tells the Angular 2 application, that this child component contains its own routing. The main application routing does not need to know anything about this.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000028","sortNo":3,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000029","sortNo":4,"contentFormatId":"1","contentTxt":"The corresponding HTML template for the main component contains the router-outlet directive. This is where the child routing content will be displayed. “[routerLink]” bindings can be used to define routing links.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000030","sortNo":5,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000031","sortNo":6,"contentFormatId":"1","contentTxt":"The root component to an Angular 2 component contains all route definitions of all the other components inside this component. This is defined just like the main routing in the main component. The paths are added onto the base routing path of this root component in the Angular 2 component. The default route is defined using the useAsDefault property by setting this the true.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000032","sortNo":7,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000033","sortNo":8,"contentFormatId":"1","contentTxt":"The HTML template for this root component just defines the router-outlet directive. This could be done inline in the typescript file.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000034","sortNo":9,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000035","sortNo":10,"contentFormatId":"1","contentTxt":"The list component is used as the default component inside the DataEventRecord component. This gets a list of DataEventRecord items using the DataEventRecordsService service and displays them in the UI using its HTML template.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000036","sortNo":11,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000037","sortNo":12,"contentFormatId":"1","contentTxt":"The template for the list component uses the “[routerLink]” so that each item can be opened and updated using the edit child component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000038","sortNo":13,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000039","sortNo":14,"contentFormatId":"1","contentTxt":"The update or edit component uses the RouteParams so that the id of the item can be read from the URL. This is then used to get the item from the ASP.NET Core MVC service using the DataEventRecordsService service. This is implemented in the ngOnInit function.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000040","sortNo":15,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000041","sortNo":16,"contentFormatId":"1","contentTxt":"The component loads the data from the service async, which means this item can be null or undefined. Because of this, it is important that *ngIf is used to check if it exists, before using it in the input form. The (click) event calls the Update function, which updates the item on the ASP.NET Core server.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000042","sortNo":17,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603290000000043","sortNo":18,"contentFormatId":"1","contentTxt":"The new routing with child routing in Angular2 makes it better or possible to separate or group your components as required and easy to test. These could be delivered as separate modules or whatever.","contentBinary":"","contentPoster":"","contentUrl":null}]