[{"id":"201604220000000001","sortNo":1,"contentFormatId":"1","contentTxt":"While the application is simple and beginner to intermediate level in its own right, the concepts here can apply to much more advanced apps. The biggest things we should focus on is using Node as an API and Angular as the frontend. Making them work together can be a bit confusing so this tutorial should help alleviate some confusion. Buckle those seatbelts; this could be a long one.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000002","sortNo":2,"contentFormatId":"1","contentTxt":"<strong>WHAT WE’LL BE BUILDING</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000003","sortNo":3,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000004","sortNo":4,"contentFormatId":"1","contentTxt":"<strong>Base Setup</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000005","sortNo":5,"contentFormatId":"1","contentTxt":"<strong>FILE STRUCTURE</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000006","sortNo":6,"contentFormatId":"1","contentTxt":"We are going to keep the file structure very simple and put most of the code for our Node application into the server.js file. In larger applications, this should be broken down further to separate duties. Mean.io is a good boilerplate to see best practices and how to separate file structure. Let’s go ahead and create our simpler file structure and edit the files as we go along.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000007","sortNo":7,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000008","sortNo":8,"contentFormatId":"1","contentTxt":"<strong>INSTALLING MODULES</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000009","sortNo":9,"contentFormatId":"1","contentTxt":"In Node, the package.json file holds the configuration for our app. Node’s package manager (npm) will use this to install any dependencies or modules that we are going to use. In our case, we will be using Express (popular Node framework) and Mongoose (object modeling for MongoDB).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000010","sortNo":10,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000011","sortNo":11,"contentFormatId":"1","contentTxt":"Now if we run npm install, npm will look at this file and install Express and Mongoose.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000012","sortNo":12,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000013","sortNo":13,"contentFormatId":"1","contentTxt":"<strong>NODE CONFIGURATION</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000014","sortNo":14,"contentFormatId":"1","contentTxt":"In our package.json file, we told it that our main file would be server.js. This is the main file for our Node app and where we will configure the entire application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000015","sortNo":15,"contentFormatId":"1","contentTxt":"This is the file where we will:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000016","sortNo":16,"contentFormatId":"1","contentTxt":"1. Configure our application","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000017","sortNo":17,"contentFormatId":"1","contentTxt":"2. Connect to our database","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000018","sortNo":18,"contentFormatId":"1","contentTxt":"3. Create our Mongoose models","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000019","sortNo":19,"contentFormatId":"1","contentTxt":"4. Define routes for our RESTful API","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000020","sortNo":20,"contentFormatId":"1","contentTxt":"5. Define routes for our frontend Angular application","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000021","sortNo":21,"contentFormatId":"1","contentTxt":"6. Set the app to listen on a port so we can view it in our browser","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000022","sortNo":22,"contentFormatId":"1","contentTxt":"For now, we will just configure the app for Express, our MongoDB database, and listening on a port.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000023","sortNo":23,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000024","sortNo":24,"contentFormatId":"1","contentTxt":"Just with that bit of code, we now have an HTTP server courtesy of Node. We have also created an app with Express and now have access to many benefits of it. In our app.configure section, we are using express modules to add more functionality to our application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000025","sortNo":25,"contentFormatId":"1","contentTxt":"<strong>DATABASE SETUP</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000026","sortNo":26,"contentFormatId":"1","contentTxt":"We will be using a remote database hosted on Modulus.io. They provide a great service and give you $15 upfront to use as you see fit. This is great for doing testing and creating databases on the fly.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000027","sortNo":27,"contentFormatId":"1","contentTxt":"Modulus will provide the database URL you need and you can use mongoose.connect to connect to it. That’s it.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000028","sortNo":28,"contentFormatId":"1","contentTxt":"<strong>START YOUR APP!</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000029","sortNo":29,"contentFormatId":"1","contentTxt":"Now that we have our package.json and server.js started up, we can start up our server and see what’s going on. Just go into your console and use the following command:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000030","sortNo":30,"contentFormatId":"1","contentTxt":"node server.js Now you have a server listening on port 8080. You can’t see anything in your browser at http://localhost:8080 yet since we didn’t configure our application to output anything. But it’s a start!","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000031","sortNo":31,"contentFormatId":"1","contentTxt":"Automatically restart server when files change: By default, node will not monitor for file changes after your server has been started. This means you’d have to shut down and start the server every time you made a file change. This can be fixed with nodemon. To use: install nodemon globally npm install -g nodemon. Start your server with nodemon server.js now. Smooth sailing from there.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000032","sortNo":32,"contentFormatId":"1","contentTxt":"<strong>Application Flow</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000033","sortNo":33,"contentFormatId":"1","contentTxt":"Now a brief overview of how all our moving parts will work together. There are a lot of different ideas and technologies involved in this application that it is easy to get mixed up with them all. In our diagram below, we explain a bit of the separation of tasks and how the parts tie in together.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000034","sortNo":34,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000035","sortNo":35,"contentFormatId":"1","contentTxt":"Angular is on its own in the frontend. It accesses all the data it needs through the Node API. Node hits the database and returns JSON information to Angular based on the RESTful routing.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000036","sortNo":36,"contentFormatId":"1","contentTxt":"This way, you can separate the frontend application from the actual API. If you want to extend the API, you can always build more routes and functions into it without affecting the frontend Angular application. This way you can eventually build different apps on different platforms since you just have to hit the API.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000037","sortNo":37,"contentFormatId":"1","contentTxt":"<strong>Creating Our Node API<strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000038","sortNo":38,"contentFormatId":"1","contentTxt":"Before we get to the frontend application, we need to create our RESTful API. This will allow us to have an api that will get all todos, create a todo, and complete and delete a todo. It will return all this information in JSON format.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000039","sortNo":39,"contentFormatId":"1","contentTxt":"<strong>TODO MODEL<strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000040","sortNo":40,"contentFormatId":"1","contentTxt":"We must define our model for our Todos. We’ll keep this simple. After the configuration section and before the listen section, we’ll add our model.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000041","sortNo":41,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000042","sortNo":42,"contentFormatId":"1","contentTxt":"That is all we want. Just the text for the todo. MongoDB will automatically generate an _id for each todo that we create also.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000043","sortNo":43,"contentFormatId":"1","contentTxt":"<strong>RESTFUL API ROUTES<strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000044","sortNo":44,"contentFormatId":"1","contentTxt":"Let’s generate our Express routes to handle our API calls.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000045","sortNo":45,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000046","sortNo":46,"contentFormatId":"1","contentTxt":"Based on these routes, we’ve built a table to explain how a frontend application should request data from the API.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000047","sortNo":47,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000048","sortNo":48,"contentFormatId":"1","contentTxt":"Inside of each of our API routes, we use the Mongoose actions to help us interact with our database. We created our Model earlier with var Todo = mongoose.model and now we can use that to find, create, and remove. There are many more things you can do and I would suggest looking at the official docs to learn more.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000049","sortNo":49,"contentFormatId":"1","contentTxt":"Our API is done! Rejoice! If you start up your application, you can interact with it at localhost:8080/api/todos to get all the todos. There won’t be anything currently since you haven’t added any.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000050","sortNo":50,"contentFormatId":"1","contentTxt":"<strong>Frontend Application with Angular<strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000051","sortNo":51,"contentFormatId":"1","contentTxt":"We have created a Node application, configured our database, generated our API routes, and started a server. So much already done and still a little bit longer to go!","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000052","sortNo":52,"contentFormatId":"1","contentTxt":"The work that we’ve done so far can stand on its own as an application. It can be an API we use let applications and users connect with our content.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000053","sortNo":53,"contentFormatId":"1","contentTxt":"We want to be the first to use our brand new API that we’ve just created. This is one of my favorite terms that I learned about last month: We will be dogfooding. We could treat this as we are our very first client to use our new API. We are going to keep this simple so we’ll have just our index.html and core.js to define our frontend.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000054","sortNo":54,"contentFormatId":"1","contentTxt":"<strong>DEFINING FRONTEND ROUTE<strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000055","sortNo":55,"contentFormatId":"1","contentTxt":"We have already defined our API routes. Our application’s API is accessible from /api/todos, but what about our frontend? How do we display the index.html file at our home page?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000056","sortNo":56,"contentFormatId":"1","contentTxt":"We will add one route to our server.js file for the frontend application. This is all we need to do since Angular will be making a single page application and handle the routing.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000057","sortNo":57,"contentFormatId":"1","contentTxt":"After our API routes, and before the app.listen, add this route:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000058","sortNo":58,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000059","sortNo":59,"contentFormatId":"1","contentTxt":"This will load our single index.html file when we hit localhost:8080.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000060","sortNo":60,"contentFormatId":"1","contentTxt":"<strong>SETTING UP ANGULAR</strong> CORE.JS","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000061","sortNo":61,"contentFormatId":"1","contentTxt":"Let’s go through our Angular setup first. We have to create a module, create a controller, and define functions to handle todos. Then we can apply to view.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000062","sortNo":62,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000063","sortNo":63,"contentFormatId":"1","contentTxt":"We create our Angular module (scotchApp) and controller (mainController).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000064","sortNo":64,"contentFormatId":"1","contentTxt":"We also create our functions to get all todos, create a todo, and delete a todo. All these will be hitting the API we just created. On page load, we will GET /api/todos and bind the JSON we receive from the API to $scope.todos. We will then loop over these in our view to make our todos.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000065","sortNo":65,"contentFormatId":"1","contentTxt":"We’ll follow a similar pattern for creating and deleting. Run our action, remake our todos list.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000066","sortNo":66,"contentFormatId":"1","contentTxt":"<strong>FRONTEND VIEW </strong>INDEX.HTML","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000067","sortNo":67,"contentFormatId":"1","contentTxt":"Here we will keep it simple. This is the HTML needed to interact with Angular. We will:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000068","sortNo":68,"contentFormatId":"1","contentTxt":"1. Assign Angular module and controller","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000069","sortNo":69,"contentFormatId":"1","contentTxt":"2. Initialize the page by getting all todos","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000070","sortNo":70,"contentFormatId":"1","contentTxt":"3. Loop over the todos","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000071","sortNo":71,"contentFormatId":"1","contentTxt":"4. Have a form to create todos","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000072","sortNo":72,"contentFormatId":"1","contentTxt":"5. Delete todos when they are checked","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000073","sortNo":73,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000074","sortNo":74,"contentFormatId":"1","contentTxt":"Take a look at what we have.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000075","sortNo":75,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000076","sortNo":76,"contentFormatId":"1","contentTxt":"<strong>Conclusion</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000077","sortNo":77,"contentFormatId":"1","contentTxt":"Now we have a fully working application that will show, create, and delete todos all via API (that we built!). That was quite a day. We’ve done so much. Just an overview of what we’ve accomplished:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000078","sortNo":78,"contentFormatId":"1","contentTxt":"1. RESTful Node API using Express","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000079","sortNo":79,"contentFormatId":"1","contentTxt":"2. MongoDB interaction using mongoose","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000080","sortNo":80,"contentFormatId":"1","contentTxt":"3. Angular AJAX $http calls","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000081","sortNo":81,"contentFormatId":"1","contentTxt":"4. Single page application w/ no refreshes","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000082","sortNo":82,"contentFormatId":"1","contentTxt":"5. Dogfooding (sorry, I really like that word)","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000083","sortNo":83,"contentFormatId":"1","contentTxt":"<strong>source code</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604220000000084","sortNo":84,"contentFormatId":"1","contentTxt":"<a href=\"https://github.com/scotch-io/node-todo\">https://github.com/scotch-io/node-todo</a>","contentBinary":"","contentPoster":"","contentUrl":null}]