[{"id":"201606010000000001","sortNo":1,"contentFormatId":"1","contentTxt":"The Notifications API allows web pages to control the display of system notifications to the end user？—？these are outside the top-level browsing context viewport, so therefore can be displayed even the user has switched tabs or moved to a different app. The API is designed to be compatible with existing notification systems across different platforms.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000002","sortNo":2,"contentFormatId":"1","contentTxt":"The Notifications API has been available for some browsers for a while now, and with Angular 2’s recent promotion to Release Candidate (yay!), I thought bringing this powerful API to the Angular world in the form of a library, would make this API more accessible and reusable for developers. Enter ng2-notifications.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000003","sortNo":3,"contentFormatId":"1","contentTxt":"<strong>Getting Started</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000004","sortNo":4,"contentFormatId":"1","contentTxt":"In order to add ng2-notifications to your project, a simple npm install and an module import can get your there pretty fast.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000005","sortNo":5,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000006","sortNo":6,"contentFormatId":"1","contentTxt":"The import statement can be included in any Angular 2 component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000007","sortNo":7,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000008","sortNo":8,"contentFormatId":"1","contentTxt":"Now the notification directive can be used inside the component’s template, like this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000009","sortNo":9,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000010","sortNo":10,"contentFormatId":"1","contentTxt":"<strong>The Syntax</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000011","sortNo":11,"contentFormatId":"1","contentTxt":"One of Angular 2’s most powerful features is its declarative markup. With ng2-notifications, a push notification can be written in Angular 2 with the use of literals or my personal favorite; data binding.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000012","sortNo":12,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000013","sortNo":13,"contentFormatId":"1","contentTxt":"Where in the component’s class, a notification property would look like this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000014","sortNo":14,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000015","sortNo":15,"contentFormatId":"1","contentTxt":"Not too bad, huh?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000016","sortNo":16,"contentFormatId":"1","contentTxt":"Other data properties include:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000017","sortNo":17,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000018","sortNo":18,"contentFormatId":"1","contentTxt":"<strong>Building the Library</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000019","sortNo":19,"contentFormatId":"1","contentTxt":"The ng2-notifications library is just a wrapper for the native Web Notifications API. It abstracts and simplifies the process of requesting the user’s permission for notifications and exposes a predictable and easy to use API in the form of an Angular 2 Component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000020","sortNo":20,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000021","sortNo":21,"contentFormatId":"1","contentTxt":"You may wonder, why not use a component instead? Well, a component is just a directive + a view, and in this case a view is not required since the UI is completely handled by the browser. That’s one of the reasons why notifications will look slightly different in every browser.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000022","sortNo":22,"contentFormatId":"1","contentTxt":"Additionally, the library adds two useful properties: [closeDelay] and [when]. The close delay does exactly what you are thinking, it closes the notifications after x amount of milliseconds. The when property is used to activate the notification given a boolean expression. Think of it as an \"ng-show\".","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000023","sortNo":23,"contentFormatId":"1","contentTxt":"Understanding Angular 2’s Directive lifecycle is crucial for showing and closing notifications at the right time: when the directive compiles, when data properties changes and when the directive is removed from its parent component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000024","sortNo":24,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000025","sortNo":25,"contentFormatId":"1","contentTxt":"From the import statement above we can see three very important Angular APIs that can help us hook into certain Directive’s states by implementing these into our Directive’s class definition.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000026","sortNo":26,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000027","sortNo":27,"contentFormatId":"1","contentTxt":"By looking at Angular 2’s new Directive API, it was obvious the @Input and@Output API could be leveraged for bidirectional communication. Some of the inputs and outputs can be defined in the following manner:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000028","sortNo":28,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000029","sortNo":29,"contentFormatId":"1","contentTxt":"These inputs and outputs are what enables us to read the data properties and execute callbacks after events fire. The latter can be expressed like this on the markup side:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000030","sortNo":30,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000031","sortNo":31,"contentFormatId":"1","contentTxt":"These are just a few of the crucial parts for building a Directive in Angular 2.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000032","sortNo":32,"contentFormatId":"1","contentTxt":"<strong>Browser Support</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000033","sortNo":33,"contentFormatId":"1","contentTxt":"Browser support plays a big part on the potential use of any new browser API. Currently, the browser support for Web Notifications is looking very promising. There is full support for desktop browsers like Chrome, Firefox, Safari, Opera and Edge 14. On the mobile browser side, there is partial support for Android Browser and no current support for iOS Chrome or Safari, Chrome for Android or Opera Mini. There are brighter days ahead for mobile support.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000034","sortNo":34,"contentFormatId":"1","contentTxt":"More information on support visit caniuse.com","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000035","sortNo":35,"contentFormatId":"1","contentTxt":"Please have in mind part of the Notifications API Specification is currently in “Recommendation” or “Living Standard” state. This means additional features may or may not become available in the foreseeable future. Some of these features include Sound and device Vibration.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000036","sortNo":36,"contentFormatId":"1","contentTxt":"ng2-notifications has these features implemented already for when the spec is ready and these features are supported by the browsers.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000037","sortNo":37,"contentFormatId":"1","contentTxt":"<strong>In Closing</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000038","sortNo":38,"contentFormatId":"1","contentTxt":"Hopefully you’ll find this Angular 2 library useful. The Web has a long way to go, but brick by brick we’ll get to a point where building Applications successfully is more the rule rather than the exception.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000039","sortNo":39,"contentFormatId":"1","contentTxt":"What other native browser APIs could be simplified with Angular 2?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000040","sortNo":40,"contentFormatId":"1","contentTxt":"<strong>source code</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201606010000000041","sortNo":41,"contentFormatId":"1","contentTxt":"<a href=\"https://github.com/alexcastillo/ng2-notifications\">https://github.com/alexcastillo/ng2-notifications</a>","contentBinary":"","contentPoster":"","contentUrl":null}]