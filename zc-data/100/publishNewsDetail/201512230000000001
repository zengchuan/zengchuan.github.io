[{"id":"201512230000000001","sortNo":1,"contentFormatId":"1","contentTxt":"In the following article I will show how to use the DynamicComponentLoader in Angular to insert components dynamically into the DOM.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000002","sortNo":2,"contentFormatId":"1","contentTxt":"In Angular we typically load a component as a tag in the markup, perhaps assisted by some conditionals or for loops to make the loading more dynamic. Generally this is the recommended approach, but there are cases where you don't know the DOM structure at compile time. In these cases we need to be able to add components on demand in arbitrary locations. It might be tempting to fall back on jQuery for this, but Angular 2.0 provides a DynamicComponentLoader that we can use for this purpose.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000003","sortNo":3,"contentFormatId":"1","contentTxt":"To demo this feature I have created a graph component where I am allowing the user to connect vertices with edges to form a graph. I am modeling the edges as separate components, but since the user is allowed to connect any pair of nodes, there is no way of knowing ahead of time where to put the edge components.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000004","sortNo":4,"contentFormatId":"1","contentTxt":"I decided to model this using three components; Graph, Vertex and Edge. Graph and Vertex instances are statically placed in the template to form a selection of disconnected nodes. By clicking on two different vertices, and edge is drawn to connect them. This is where DynamicComponetLoader comes into play by allowing me to load components into the DOM.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000005","sortNo":5,"contentFormatId":"1","contentTxt":"The code for the three components looks like the following:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000006","sortNo":6,"contentFormatId":"1","contentTxt":"Vertex","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000017","sortNo":7,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000018","sortNo":8,"contentFormatId":"1","contentTxt":"Vertex defines a node in the graph and it exposes the x,y coordinates of the node in the DOM. It also exposes a click handler that, through event propagation, shares the coordinates with its parent component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000019","sortNo":9,"contentFormatId":"1","contentTxt":"Edge","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000020","sortNo":10,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000021","sortNo":11,"contentFormatId":"1","contentTxt":"Basically the purpose of this component is to draw a line between two sets of coordinates. Part of this involves calculating the angle of the line between the points which is can be found using atan2 and some supporting calculations. Don't worry I had to look up that formula too :-).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000022","sortNo":12,"contentFormatId":"1","contentTxt":"Graph","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000023","sortNo":13,"contentFormatId":"1","contentTxt":"Graph is the container component and the part that ties it all together.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000024","sortNo":14,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000025","sortNo":15,"contentFormatId":"1","contentTxt":"The graph component gets the coordinates from the clicked vertices through event delegation triggered by the click event. The next step is to make sure two nodes have been clicked before attempting to draw the edge between them. The key here is","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000026","sortNo":16,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000027","sortNo":17,"contentFormatId":"1","contentTxt":"As you can tell we are passing in a component to load, an elementRef and a target element for the component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000028","sortNo":18,"contentFormatId":"1","contentTxt":"The target element is interesting, but to explain how that works, we have to look at the template for the graph.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000029","sortNo":19,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000030","sortNo":20,"contentFormatId":"1","contentTxt":"Notice how we have defined view variables like #a, #b, etc. These variables are Angular 2.0 specific and become anchor points for the inserted edges.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000031","sortNo":21,"contentFormatId":"1","contentTxt":"LoadIntoLocation() returns a promise that we can resolve to get a reference to the actual component instance. This is helpful since it allows us to pass in data and trigger the drawing of the edge.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000032","sortNo":22,"contentFormatId":"1","contentTxt":"As you can tell from the screenshot below clicking pairs of nodes will enable you to connect any pair of nodes.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000033","sortNo":23,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512230000000034","sortNo":24,"contentFormatId":"1","contentTxt":"As always the code is available on Github. https://github.com/thelgevold/angular-2-samples","contentBinary":"","contentPoster":"","contentUrl":null}]