[{"id":"201602240000000001","sortNo":1,"contentFormatId":"1","contentTxt":"There have been some quite useful articles for how to debug Angular 1.x applications from the browser's console. But how can we achieve the same in Angular 2? Is there even a way? Let's see.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000002","sortNo":2,"contentFormatId":"1","contentTxt":"I always found it quite neat how to debug my Angular 1.x applications directly from my browser's console. Take Chrome's devtools for instance. You can open the Elements tab and click on your Angular 2 component. The nice thing about the Chrome devtools is that it'll keep a reference to the selected DOM node in the variable $0 which you can then directly access from the console.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000003","sortNo":3,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000004","sortNo":4,"contentFormatId":"1","contentTxt":"Enabling/Disabling Debugging","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000005","sortNo":5,"contentFormatId":"1","contentTxt":"By default debugging is enabled in Angular 2 applications. In fact when you run your app you might see a log in your console saying something like:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000006","sortNo":6,"contentFormatId":"1","contentTxt":"\"Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.\"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000007","sortNo":7,"contentFormatId":"1","contentTxt":"In fact, whenever you deploy your application you should disable debugging information and switch into production mode. You can do that like this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000039","sortNo":8,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000040","sortNo":9,"contentFormatId":"1","contentTxt":"Inspect the Component state","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000041","sortNo":10,"contentFormatId":"1","contentTxt":"The interesting part is to inspect the current state of our rendered component. We can do this by again selecting our component in the elements tab and then executing the following in the console.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000042","sortNo":11,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000043","sortNo":12,"contentFormatId":"1","contentTxt":"Expand the result object in the devtools and navigate through it. There are are a couple of interesting things being exposed to you. Most interestingly, we can get a reference to the instance of our component class using..","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000044","sortNo":13,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000045","sortNo":14,"contentFormatId":"1","contentTxt":"Once we have that instance, we can interact with it, like changing the name property in the case of our simple hello world component example.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000046","sortNo":15,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000047","sortNo":16,"contentFormatId":"1","contentTxt":"Strange enough, the UI won't reflect our changes. Well remember $digest() :wink:. Angular 2 has a similar, but more advanced mechanism. Anyway, without going into the details, we need to invoke that change detector.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000048","sortNo":17,"contentFormatId":"1","contentTxt":"I dug through the Angular source and this was the best way I could come up with to activate the change detection mechanism:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000049","sortNo":18,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000050","sortNo":19,"contentFormatId":"1","contentTxt":"Not sure if you noticed, but we invoked the change detector on our selected Angular 2 component ($0) and not globally. This is because change detection is hierarchical, hence, every Angular 2 component get its own change detector.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000051","sortNo":20,"contentFormatId":"1","contentTxt":"Here's the result of executing the change detector:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000052","sortNo":21,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000053","sortNo":22,"contentFormatId":"1","contentTxt":"Batarangle","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000054","sortNo":23,"contentFormatId":"1","contentTxt":"If you're not the console type of guy, you may appreciate the visual debugging tool Batarangle from Rangle.io.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000055","sortNo":24,"contentFormatId":"1","contentTxt":"Conclusion","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602240000000056","sortNo":25,"contentFormatId":"1","contentTxt":"That's it. I'll try to keep this article updated and even extend it with further debugging possibilities as Angular 2 evolves towards its final release. Also, if you have any suggestions/improvements, as always, comment!","contentBinary":"","contentPoster":"","contentUrl":null}]