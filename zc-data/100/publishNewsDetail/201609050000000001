[{"id":"201609050000000001","sortNo":1,"contentFormatId":"1","contentTxt":"The following is an example of how to setup a simple login page using Angular 2 and JWT authentication.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000002","sortNo":2,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Project Structure</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000003","sortNo":3,"contentFormatId":"1","contentTxt":"I used the Angular 2 quickstart project as a base for the application, it's written in TypeScript and uses systemjs for loading modules. If you're new to angular 2 I'd recommend checking out the quickstart as it provides details on the project tooling and configuration files which aren't covered in this post.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000004","sortNo":4,"contentFormatId":"1","contentTxt":"The project and code structure mostly follows the recommendations in the official Angular 2 style guide, with my own tweaks here and there.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000005","sortNo":5,"contentFormatId":"1","contentTxt":"Each feature has it's own folder (home & login), other code such as services, models, guards etc are placed in folders prefixed with an underscore to easily differentiate them and group them together at the top of the folder structure.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000006","sortNo":6,"contentFormatId":"1","contentTxt":"Here's the project structure:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000007","sortNo":7,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000008","sortNo":8,"contentFormatId":"1","contentTxt":"Below are brief descriptions and the code for the main files of the example application, all files are available in the github project linked at the top of the post.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000009","sortNo":9,"contentFormatId":"1","contentTxt":"Angular 2 Auth Guard","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000010","sortNo":10,"contentFormatId":"1","contentTxt":"Path: /app/_guards/auth.guard.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000011","sortNo":11,"contentFormatId":"1","contentTxt":"The auth guard is used to prevent unauthenticated users from accessing restricted routes, it's used in app.routing.ts to protect the home page route. For more information about angular 2 guards you can check out this post on the thoughtram blog.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000012","sortNo":12,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000013","sortNo":13,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Fake Backend Provider</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000014","sortNo":14,"contentFormatId":"1","contentTxt":"Path: /app/_helpers/fake-backend.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000015","sortNo":15,"contentFormatId":"1","contentTxt":"The fake backend provider enables the example to run without a backend / backendless.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000016","sortNo":16,"contentFormatId":"1","contentTxt":"It uses the Angular 2 MockBackend to replace the default backend used by the Http service, the MockBackend enables you to intercept http requests made within the application and provide fake responses, it's also used for unit testing.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000017","sortNo":17,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000018","sortNo":18,"contentFormatId":"1","contentTxt":"<strong>Angular 2 User Model</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000019","sortNo":19,"contentFormatId":"1","contentTxt":"Path: /app/_models/user.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000020","sortNo":20,"contentFormatId":"1","contentTxt":"The user model is a small class that defines the properties of a user.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000021","sortNo":21,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000022","sortNo":22,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Authentication Service</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000023","sortNo":23,"contentFormatId":"1","contentTxt":"Path: /app/_services/authentication.service.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000024","sortNo":24,"contentFormatId":"1","contentTxt":"The authentication service is used to login and logout of the application, to login it posts the users credentials to the api and checks the response for a JWT token, if there is one it means authentication was successful so the user details are added to local storage and the token saved to the AuthenticationService.token property. The token property is used by other services in the application to set the authorization header of http requests made to secure api endpoints.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000025","sortNo":25,"contentFormatId":"1","contentTxt":"The logged in user details are stored in local storage so the user will stay logged in if they refresh the browser and also between browser sessions until they logout. If you don't want the user to stay logged in between refreshes or sessions the behaviour could easily be changed by storing user details somewhere less persistent such as session storage or in a property of the authentication service.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000026","sortNo":26,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000027","sortNo":27,"contentFormatId":"1","contentTxt":"<strong>Angular 2 User Service</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000028","sortNo":28,"contentFormatId":"1","contentTxt":"Path: /app/_services/user.service.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000029","sortNo":29,"contentFormatId":"1","contentTxt":"The user service contains a method for getting all users from the api, I included it to demonstrate accessing a secure api endpoint with the http authorization header set after logging in to the application. The secure endpoint in the example is a fake one implemented in the fake backend provider above.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000030","sortNo":30,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000031","sortNo":31,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Home Component Template</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000032","sortNo":32,"contentFormatId":"1","contentTxt":"Path: /app/home/home.component.html","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000033","sortNo":33,"contentFormatId":"1","contentTxt":"The home component template contains html and angular 2 template syntax for displaying a simple welcome message, a list of users and a logout link.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000034","sortNo":34,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000035","sortNo":35,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Home Component</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000036","sortNo":36,"contentFormatId":"1","contentTxt":"Path: /app/home/home.component.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000037","sortNo":37,"contentFormatId":"1","contentTxt":"The home component defines an angular 2 component that gets all users from the user service and makes them available to the template via the 'users' property.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000038","sortNo":38,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000039","sortNo":39,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Login Component Template</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000040","sortNo":40,"contentFormatId":"1","contentTxt":"Path: /app/login/login.component.html","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000041","sortNo":41,"contentFormatId":"1","contentTxt":"The login component template contains a login form with username and password fields. It displays validation messages for invalid fields when the submit button is clicked. On form submit the login() method is called.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000042","sortNo":42,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000043","sortNo":43,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Login Component</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000044","sortNo":44,"contentFormatId":"1","contentTxt":"Path: /app/login/login.component.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000045","sortNo":45,"contentFormatId":"1","contentTxt":"The login component uses the authentication service to login and logout of the application. It automatically logs the user out when it initializes (ngOnInit) so the login page can also be used to logout.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000046","sortNo":46,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000047","sortNo":47,"contentFormatId":"1","contentTxt":"<strong>Angular 2 App Component Template</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000048","sortNo":48,"contentFormatId":"1","contentTxt":"Path: /app/app.component.html","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000049","sortNo":49,"contentFormatId":"1","contentTxt":"The app component template is the root component template of the application, it contains a router-outlet directive for displaying the contents of each view based on the current route / path.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000050","sortNo":50,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000051","sortNo":51,"contentFormatId":"1","contentTxt":"<strong>Angular 2 App Component</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000052","sortNo":52,"contentFormatId":"1","contentTxt":"Path: /app/app.component.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000053","sortNo":53,"contentFormatId":"1","contentTxt":"The app component is the root component of the application, it defines the root tag of the app as <app></app> with the selector property.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000054","sortNo":54,"contentFormatId":"1","contentTxt":"The moduleId property is set to allow a relative path to be used for the templateUrl.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000055","sortNo":55,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000056","sortNo":56,"contentFormatId":"1","contentTxt":"<strong>Angular 2 App Module</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000057","sortNo":57,"contentFormatId":"1","contentTxt":"Path: /app/app.module.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000058","sortNo":58,"contentFormatId":"1","contentTxt":"The app module defines the root module of the application along with metadata about the module. For more info about angular 2 modules check out this page on the official docs site.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000059","sortNo":59,"contentFormatId":"1","contentTxt":"This is where the fake backend provider is added to the application, to switch to a real backend simply remove the providers located under the comment \"// providers used to create fake backend\".","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000060","sortNo":60,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000061","sortNo":61,"contentFormatId":"1","contentTxt":"<strong>Angular 2 App Routing</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000062","sortNo":62,"contentFormatId":"1","contentTxt":"Path: /app/app.routing.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000063","sortNo":63,"contentFormatId":"1","contentTxt":"The app routing file defines the routes of the application, each route contains a path and associated component. The home route is secured by passing the AuthGuard to the canActivate property of the route.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000064","sortNo":64,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000065","sortNo":65,"contentFormatId":"1","contentTxt":"<strong>Angular 2 Main (Bootstrap) File</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000066","sortNo":66,"contentFormatId":"1","contentTxt":"Path: /app/main.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000067","sortNo":67,"contentFormatId":"1","contentTxt":"The main file is the entry point used by angular to launch and bootstrap the application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000068","sortNo":68,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000069","sortNo":69,"contentFormatId":"1","contentTxt":"<strong>source code</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201609050000000070","sortNo":70,"contentFormatId":"1","contentTxt":"<a href=\"https://github.com/cornflourblue/angular2-jwt-authentication-example\">https://github.com/cornflourblue/angular2-jwt-authentication-example</a>","contentBinary":"","contentPoster":"","contentUrl":null}]