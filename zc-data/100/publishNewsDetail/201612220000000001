[{"id":"201612220000000001","sortNo":1,"contentFormatId":"1","contentTxt":"Server-side rendering is a headache and if you ever worked with Angular 1, you should be worried about how Angular 2 plans to handle it. Server-side rendering in Angular 2 is often-times also called Universal.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000002","sortNo":2,"contentFormatId":"1","contentTxt":"You might often hear people say stuff like: \"I am building an app that will be universal\". What does that even mean?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000003","sortNo":3,"contentFormatId":"1","contentTxt":"<strong>What is Universal?</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000004","sortNo":4,"contentFormatId":"1","contentTxt":"When we build apps, we consider the following elements:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000005","sortNo":5,"contentFormatId":"1","contentTxt":"1. Content","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000006","sortNo":6,"contentFormatId":"1","contentTxt":"2. Style","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000007","sortNo":7,"contentFormatId":"1","contentTxt":"3. State","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000008","sortNo":8,"contentFormatId":"1","contentTxt":"By default, front end frameworks have virtual DOM so when a hard request is made to an app built with such frameworks (like Angular), the expected behavior is weird. The request is served with a response of just the HTML content found at the entry point of the app while the main app content is lost.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000009","sortNo":9,"contentFormatId":"1","contentTxt":"This is not a problem to your users because your app virtually has content, styles, and state. Where the problem kicks in is with web crawlers that index your site for SEO sake. They get served with the incomplete HTML content which is very useless to them. This behavior even gets more painful when you expect people to share your app's link and you see an image like the one below when they do:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000010","sortNo":10,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000011","sortNo":11,"contentFormatId":"1","contentTxt":"In Angular 1, if you tried to bind the app's title and description values using $rootScope you end up disappointed at how crawlers and social media robots see your site.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000012","sortNo":12,"contentFormatId":"1","contentTxt":"To replicate this challenge in Angular 2, I built an Angular 2 app with three routes (home, about and contact):","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000013","sortNo":13,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000014","sortNo":14,"contentFormatId":"1","contentTxt":"<strong>Preview</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000015","sortNo":15,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000016","sortNo":16,"contentFormatId":"1","contentTxt":"<strong>Source</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000017","sortNo":17,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000018","sortNo":18,"contentFormatId":"1","contentTxt":"The conventional server rendering solution has saved us for years with Angular 1 by provisioning web crawlers with our actual content. That seemed to keep us happy but we were missing one thing -- state.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000019","sortNo":19,"contentFormatId":"1","contentTxt":"The Universal idea is to build an app that does not just render to server but also runs on the server. Running in the sense that our state, content and styles are intact on the client and the server as well. In Angular 2, this is achieved with the help of Angular Universal which loads our app on the server first, and then drops it to the browser once ready.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000020","sortNo":20,"contentFormatId":"1","contentTxt":"<strong>What is Angular Universal?</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000021","sortNo":21,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000022","sortNo":22,"contentFormatId":"1","contentTxt":"Angular Universal is the library the awesome Angular team is working on to make building universal apps a smooth experience. The library fixes a lot of nightmare we had working with Angular 1. As a matter of fact, our worst nightmare in Angular 1 is what Angular Universal takes away in Angular 2:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000023","sortNo":23,"contentFormatId":"1","contentTxt":"<strong>SEO FRIENDLY</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000024","sortNo":24,"contentFormatId":"1","contentTxt":"Angular Universal helps you to serve your app content to the server just as you did on the browser. When a web crawlers visit, they will be able to index you website's full content that can be used on search engines. This thereby solves one of the most popular front end challenges when working with JavaScript frameworks that create virtual DOM.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000025","sortNo":25,"contentFormatId":"1","contentTxt":"<strong>SOCIAL MEDIA FRIENDLY</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000026","sortNo":26,"contentFormatId":"1","contentTxt":"With Angular Universal serving your sever with browser content, social media platforms that display brief information about your website when a link is added can get access to the needed details.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000027","sortNo":27,"contentFormatId":"1","contentTxt":"<strong>PRE-RENDERING</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000028","sortNo":28,"contentFormatId":"1","contentTxt":"This is the most bind-blowing feature offered by Angular Universal. Angular Universal renders both your content and state as well as registering events on the server. The implication is that when your app boots, the server would serve the server-rendered content and a user can make use of the app at that stage.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000029","sortNo":29,"contentFormatId":"1","contentTxt":"The user's activities are recorded (with Preboot.js) at this stage and after couple of seconds when Angular is ready with the real thing, the user is automatically switched and those events replayed. The user won't even catch a glimpse of what is happening under the hood.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000030","sortNo":30,"contentFormatId":"1","contentTxt":"<strong>Getting Started</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000031","sortNo":31,"contentFormatId":"1","contentTxt":"Now that we have seen what Universal and Angular Universal are, how do we join the party? Angular Universal is coming to Angular CLI real soon but before that we have projects to build now.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000032","sortNo":32,"contentFormatId":"1","contentTxt":"<strong>UNIVERSAL STARTER PROJECT</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000033","sortNo":33,"contentFormatId":"1","contentTxt":"Patrick built an awesome starter for Angular Universal apps which we are going to clone so as to test out these awesome tool.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000034","sortNo":34,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000035","sortNo":35,"contentFormatId":"1","contentTxt":"If you have been building Angular 2 app lately, you will see that the directory looks much alike to what we are used to. The key difference is the bootstrapping process. Bootstrapping Universal apps are done with a different library and in two different files (client.ts & server.ts).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000036","sortNo":36,"contentFormatId":"1","contentTxt":"Furthermore, we usually make use of platformBrowserDynamic to bootstrap but for Universal, we use platformUniversalLibrary from the Angular Universal library:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000037","sortNo":37,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000038","sortNo":38,"contentFormatId":"1","contentTxt":"The bootloader function just checks that the DOM is ready before bootstrapping Angular 2.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000039","sortNo":39,"contentFormatId":"1","contentTxt":"The above logic is what we are used to but this time we are making use if platformUniversalDynamic to bootstrap. The module we are bootstrapping is imported from ./src/browser.module.ts:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000040","sortNo":40,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000041","sortNo":41,"contentFormatId":"1","contentTxt":"Same old module that we are comfortable with. We also import the UniversalModule which must be imported before every other imports.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000042","sortNo":42,"contentFormatId":"1","contentTxt":"The two files we just looked at handles browser rendering, so let's look at server.ts and it's accompanying module for server rendering:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000043","sortNo":43,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000044","sortNo":44,"contentFormatId":"1","contentTxt":"Universal is supported in Node and ASP.Net but coming to other backend platforms soon. We are using Node and to be precise to express server. The server uses the createEngine method to create a view engine that will deliver our Angular app content. The routes for each of the pages we need to render are handled as well. The rest of the code preps the express server.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000045","sortNo":45,"contentFormatId":"1","contentTxt":"MainModule is imported here too and used to render our views:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000046","sortNo":46,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000047","sortNo":47,"contentFormatId":"1","contentTxt":"<strong>CUSTOM COMPONENTS</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000048","sortNo":48,"contentFormatId":"1","contentTxt":"Every other thing in the app anatomy can now be all about your custom logic. Let's create our page components:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000049","sortNo":49,"contentFormatId":"1","contentTxt":"<strong>Home Component</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000050","sortNo":50,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000051","sortNo":51,"contentFormatId":"1","contentTxt":"<strong>Home Template</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000052","sortNo":52,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000053","sortNo":53,"contentFormatId":"1","contentTxt":"Same idea applies to about and contact component so you can have fun by creating those ones yourself.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000054","sortNo":54,"contentFormatId":"1","contentTxt":"<strong>ROUTING</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000055","sortNo":55,"contentFormatId":"1","contentTxt":"We can now create the 3 routes we specified in the server file:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000056","sortNo":56,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000057","sortNo":57,"contentFormatId":"1","contentTxt":"The routes should be imported into our app module before it can work:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000058","sortNo":58,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000059","sortNo":59,"contentFormatId":"1","contentTxt":"Remember to specify the outlet for the route as well (it is easy to forget):","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000060","sortNo":60,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000061","sortNo":61,"contentFormatId":"1","contentTxt":"You can run the app with:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000062","sortNo":62,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000063","sortNo":63,"contentFormatId":"1","contentTxt":"<strong>Preview</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000064","sortNo":64,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000065","sortNo":65,"contentFormatId":"1","contentTxt":"<strong>Source</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000066","sortNo":66,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000067","sortNo":67,"contentFormatId":"1","contentTxt":"You can see the difference in the server-served content. It clearly represents the Contact page with the form and button.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000068","sortNo":68,"contentFormatId":"1","contentTxt":"<strong>Stay Away From The DOM</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000069","sortNo":69,"contentFormatId":"1","contentTxt":"The power of Universal comes from the fact that Angular abstracts DOM rendering. This is what makes Angular support for multi-platform possible. If you want Universal to keep working as expected, the you have to stay away from the DOM.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000070","sortNo":70,"contentFormatId":"1","contentTxt":"This does not mean that you cannot perform DOM operations but do not do that with the native solutions (document.domMethod() or $('dom-element')).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201612220000000071","sortNo":71,"contentFormatId":"1","contentTxt":"Angular provides us a better way to perform DOM operations safely. See ElementRef, Renderer and ViewContainer APIs for more details.","contentBinary":"","contentPoster":"","contentUrl":null}]