[{"id":"201608180000000001","sortNo":1,"contentFormatId":"1","contentTxt":"SVG has been a viable web technology for several years now; and, a general graphics technology for many more years than that. And yet, it was a total blind-spot for me. I didn't know thing-one about it. Luckily, on the very day that I tweeted about my ignorance, Chris Coyier released \"Practical SVG\" as part of the \"Book Apart\" collection. I'm not one to look a gift horse in the mouth, so I purchased the book and gave it a read.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000002","sortNo":2,"contentFormatId":"1","contentTxt":"This book was exactly the thing that I needed! It shed light on every aspect of SVG from basic usage and browser support all the way through design applications and build tools. It's not an in-depth book on SVG; rather, it's a primer on the technology and its whole landscape - a sort of \"review of the literature,\" if you will. But, it certainly contained enough detail to shatter the mystery and open my eyes up to the possibilities.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000003","sortNo":3,"contentFormatId":"1","contentTxt":"The book is a fairly quick read, as most books in the Book Apart series are. I spent a few hours reading it the first time, drinking from the firehose of new information. Then, I went back and skimmed it again, re-reading some of the implementation details, this time with a better mental model.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000004","sortNo":4,"contentFormatId":"1","contentTxt":"At this point, I'm certainly no SVG expert; but, as Garrison Keillor might say, this book \"gives shy persons the strength to get up and do what needs to be done.\" So, taking what I learned from \"Practical SVG,\" I wanted to try and implement some SVG-based solutions in an Angular 2 context.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000005","sortNo":5,"contentFormatId":"1","contentTxt":"To experiment with SVG, I tried to create a \"mood rating\" component in which the user can select one of five emoticons that most closely represents their current mood. I designed the emoticons in Adobe Fireworks (one of the best graphics programs of all time); and, included each emoticon as an individual, inline SVG document in the component template.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000006","sortNo":6,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000007","sortNo":7,"contentFormatId":"1","contentTxt":"Two powerful features of SVG are that it can scale infinitely and that it can be styled using CSS (Cascading Stylesheets). In this case, I'm exposing a [size] input property that will allow me to render the component at different sizes. I'm also using the \"currentColor\" as the \"fill\" and \"stroke\" properties so that the color of the emoticons can be defined by the calling context (driven by the CSS text color).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000008","sortNo":8,"contentFormatId":"1","contentTxt":"In my root component, I'm then rendering the mood-rating component three times, each with a different size and rendering color:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000009","sortNo":9,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000010","sortNo":10,"contentFormatId":"1","contentTxt":"And, when we run this in the browser, we get the following output:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000011","sortNo":11,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000012","sortNo":12,"contentFormatId":"1","contentTxt":"As you can see, the SVG emoticons look nice a crisp at all three sizes. And, the color styling of the component cascades down into the fill and stroke color of the embedded SVG documents. Super cool stuff! And, the nice thing about an Angular 2 component is that you only pay the price of the payload once. Meaning, I only transfer the SVG content down to the browser as part of the JavaScript payload; then, each instance of the component is nothing but a client-side clone, so to speak, of the original HTML and SVG.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000013","sortNo":13,"contentFormatId":"1","contentTxt":"I'm sure that my SVG demo leaves much to be desired in the eyes of SVG experts. But, the point is, a few days ago, I didn't know anything about SVG at all. And now, after having read \"Practical SVG\" by Chris Coyier, I'm feel empowered. There's still so much to learn; but, I'm headed in the right direction and I have a sense of where I need to go next.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000014","sortNo":14,"contentFormatId":"1","contentTxt":"source code:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000015","sortNo":15,"contentFormatId":"1","contentTxt":"<a href=\"https://github.com/bennadel/JavaScript-Demos/tree/master/demos/svg-angular2\">https://github.com/bennadel/JavaScript-Demos/tree/master/demos/svg-angular2</a>","contentBinary":"","contentPoster":"","contentUrl":null}]