[{"id":"201603230000000034","sortNo":1,"contentFormatId":"1","contentTxt":"Yesterday, I took a quick look at trying to set the window / document title in an Angular 2 application. After I was done, however, something wasn't sitting right with me; all of the injectables in my demo specifically referenced the \"browser\" platform. A lot of work has been done, in Angular 2, to abstract the platform away so that it can be run a variety of different contexts. As such, I wanted to re-think setting the document title in a way that was platform agnostic.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603230000000035","sortNo":2,"contentFormatId":"1","contentTxt":"Yesterday, I made reference to three browser-specific platform services when trying to set the document title:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603230000000036","sortNo":3,"contentFormatId":"1","contentTxt":"1、ng.platform.browser.Title","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603230000000037","sortNo":4,"contentFormatId":"1","contentTxt":"2、ng.platform.browser.BrowserDomAdapter","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603230000000038","sortNo":5,"contentFormatId":"1","contentTxt":"3、ng.platform.browser.DOCUMENT","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603230000000039","sortNo":6,"contentFormatId":"1","contentTxt":"Now, we want to get away from thinking about anything \"browser\" specific. But, we still need to be able to reference something outside of the root component (since Angular 2 can't be boostrapped on the entire HTML page). Luckily, the DOCUMENT token is also available in the common_dom export, which means its available across all DOM (Document Object Model) implementations. And, we already get a rendering engine in the Angular 2 core:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603230000000040","sortNo":7,"contentFormatId":"1","contentTxt":"1、ng.platform.common_dom.DOCUMENT","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603230000000041","sortNo":8,"contentFormatId":"1","contentTxt":"2、ng.core.Renderer","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603230000000042","sortNo":9,"contentFormatId":"1","contentTxt":"Together, we can use these two services to change the document title without making any references to the \"browser\" itself:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603230000000043","sortNo":10,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603230000000044","sortNo":11,"contentFormatId":"1","contentTxt":"As you can see, we aren't even assuming that we know how to access the properties on the injected DOCUMENT. Instead, we are deferring to the Renderer to set the \"title\" property in case this is a non-trivial (or impossible) request in other rendering contexts. And, when we run this page, we can successfully set the document title:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603230000000045","sortNo":12,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603230000000046","sortNo":13,"contentFormatId":"1","contentTxt":"Thinking in a platform-agnostic way is a huge mental leap when going from AngularJS 1.x to Angular 2. And, unfortunately, I don't see a lot of discussion about what that means from a practical sense for developers trying to execute on mundane tasks like setting the document title or cloning nodes (something I'm still experimenting with). But, at least now I have it in my mind to stay away from anything \"browser\" specific in the exported services in the Angular 2 framework.","contentBinary":"","contentPoster":"","contentUrl":null}]