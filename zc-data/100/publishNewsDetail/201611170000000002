[{"id":"201611170000000031","sortNo":1,"contentFormatId":"1","contentTxt":"When we started to learn to code, we were taught to write in a particular way or style. In Angular, you have to use different types of directives as part of the language. Today we are showing you three ways on how to use those different types of directives.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000032","sortNo":2,"contentFormatId":"1","contentTxt":"<strong>3 Types of Angular Directives and When to Use Them</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000033","sortNo":3,"contentFormatId":"1","contentTxt":"Directives are the building blocks of angular applications. Every time you see or use something like <my-app> or <div *my-directive>, you are using some form of an Angular directive.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000034","sortNo":4,"contentFormatId":"1","contentTxt":"Here’s an Angular 2 directive:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000035","sortNo":5,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000036","sortNo":6,"contentFormatId":"1","contentTxt":"Even if you know absolutely nothing about Angular, you can see how simple and elegant this new syntax is.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000037","sortNo":7,"contentFormatId":"1","contentTxt":"The striking differences between the Angular 2 syntax and the syntax of its predecessors include a class based approached, the @Directive annotation and lack of the app.directive...-like boilerplate code.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000038","sortNo":8,"contentFormatId":"1","contentTxt":"Let’s break down the code in the directive above.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000039","sortNo":9,"contentFormatId":"1","contentTxt":"1. The import statement","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000040","sortNo":10,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000041","sortNo":11,"contentFormatId":"1","contentTxt":"This statement gives us access to the Directive function decorator from the angular/core library.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000042","sortNo":12,"contentFormatId":"1","contentTxt":"If you haven’t started working with ES6 yet (start now!): the import statement imports classes, functions, and variables exported by other external modules / files.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000043","sortNo":13,"contentFormatId":"1","contentTxt":"When we start a new Angular 2 project, we install a bunch of dependencies using npm install. The @angular libraries are installed at that time. We can then reference these libraries using the syntax above.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000044","sortNo":14,"contentFormatId":"1","contentTxt":"2. @Directive","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000045","sortNo":15,"contentFormatId":"1","contentTxt":"What would the directive code above look like without @Directive?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000046","sortNo":16,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000047","sortNo":17,"contentFormatId":"1","contentTxt":"That’s it. It’s just another javascript class being exported. Nothing special about it. The @Directive decorator is what makes this class so special.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000048","sortNo":18,"contentFormatId":"1","contentTxt":"@Directive simply adds metadata to the plain MyDirective class. This allows angular to treat this class differently. That means that JavaScript doesn’t care about these decorators, only Angular does.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000049","sortNo":19,"contentFormatId":"1","contentTxt":"At this point, if you’re curious or you’re confused about the difference between annotators and decorators, ThoughtRam has a great article that will tell you about the difference between annotators and decorators in Angular 2.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000050","sortNo":20,"contentFormatId":"1","contentTxt":"For this purpose of this article you can use these words interchangeably.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000051","sortNo":21,"contentFormatId":"1","contentTxt":"3. The export statement","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000052","sortNo":22,"contentFormatId":"1","contentTxt":"The final thing we do when creating this directive is export the class.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000053","sortNo":23,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000054","sortNo":24,"contentFormatId":"1","contentTxt":"This allows the directive to be imported and used throughout the application. You can configure which modules can use this directive by declaring it under the declarations and exports of the module that contains this directive.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000055","sortNo":25,"contentFormatId":"1","contentTxt":"Now that you know what directives are and the code you need to create them, let’s write a simple directive.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000056","sortNo":26,"contentFormatId":"1","contentTxt":"<strong>A Component IS a directive</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000057","sortNo":27,"contentFormatId":"1","contentTxt":"A component is nothing but a directive with a template. You can think of a component as a display or UI directive. It has some basic logic and renders HTML.\nComponents are the big daddy of directives. They are the most frequently used directives and can be nested in other components.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000058","sortNo":28,"contentFormatId":"1","contentTxt":"Let’s look at the syntax of the component (Directive) we have right now.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000059","sortNo":29,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000060","sortNo":30,"contentFormatId":"1","contentTxt":"This directive imports the annotation from the @angular/core module, adds the metadata and finally exports the class.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000061","sortNo":31,"contentFormatId":"1","contentTxt":"Even though components are directives, the metadata properties we set for components and directives are different. This is mainly because (non-component) directives serve purposes other than building UI.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000062","sortNo":32,"contentFormatId":"1","contentTxt":"We won’t be diving deeper into Components and their metadata properties in this article. You can read more about it in an upcoming article.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000063","sortNo":33,"contentFormatId":"1","contentTxt":"Now let’s look at the other two kinds of directives.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000064","sortNo":34,"contentFormatId":"1","contentTxt":"<strong>Structural Directives</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000065","sortNo":35,"contentFormatId":"1","contentTxt":"We use structural directives for DOM manipulations. ngFor and ngIf are two examples of Angular Structural directives built into the Angular library.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000066","sortNo":36,"contentFormatId":"1","contentTxt":"Here’s a simple structural directive we wrote that is a custom implementation of the ngIf directive provided by Angular.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000067","sortNo":37,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000068","sortNo":38,"contentFormatId":"1","contentTxt":"Let’s go through this code together, starting with the selector.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000069","sortNo":39,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000070","sortNo":40,"contentFormatId":"1","contentTxt":"This is almost like a Component. The difference is the enclosure in [] square brackets. This is to tell angular to apply this directive to any element having the attribute mySD.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000071","sortNo":41,"contentFormatId":"1","contentTxt":"The main logic for the structural directive is in the class definition.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000072","sortNo":42,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000073","sortNo":43,"contentFormatId":"1","contentTxt":"The first thing to notice is the constructor.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000074","sortNo":44,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000075","sortNo":45,"contentFormatId":"1","contentTxt":"The constructor receives two arguments – the TemplateRef and the ViewContainerRef. To understand what these are, we need to look at how Angular process directives.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000076","sortNo":46,"contentFormatId":"1","contentTxt":"1. How Angular Sees Directives","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000077","sortNo":47,"contentFormatId":"1","contentTxt":"Every time we use the syntax *directive as in *ngIf or *ngFor, Angular does some magic on the element.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000078","sortNo":48,"contentFormatId":"1","contentTxt":"For example, let’s look at the code below:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000079","sortNo":49,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000080","sortNo":50,"contentFormatId":"1","contentTxt":"Here we apply the *ngIf directive to the paragraph tag and display the text if the watsonAround condition is true. At least this is how we see it when writing and reading this code.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000081","sortNo":51,"contentFormatId":"1","contentTxt":"Angular sees the same code a little differently.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000082","sortNo":52,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000083","sortNo":53,"contentFormatId":"1","contentTxt":"Angular encapsulates the element in a template tag.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000084","sortNo":54,"contentFormatId":"1","contentTxt":"Because Angular processes template tags differently. Unlike browsers (which hide the contents of a template tag by default), Angular converts them to a script tag.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000085","sortNo":55,"contentFormatId":"1","contentTxt":"It uses this script tag to render DOM elements based on instructions in the directive.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000086","sortNo":56,"contentFormatId":"1","contentTxt":"This brings us back to the TemplateRef and ViewContainerRef variables.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000087","sortNo":57,"contentFormatId":"1","contentTxt":"2. TemplateRef and ViewContainerRef","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000088","sortNo":58,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000089","sortNo":59,"contentFormatId":"1","contentTxt":"The templateRef variable gives us access to the element in the <template> tag. This can be embedded into the view container.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000090","sortNo":60,"contentFormatId":"1","contentTxt":"The viewContainerRef is a reference to the container where we can attach the template.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000091","sortNo":61,"contentFormatId":"1","contentTxt":"3. Rendering the template","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000092","sortNo":62,"contentFormatId":"1","contentTxt":"Once we have access to the template and view container, we can render the contents of the template based on some logic. We can manipulate elements in the DOM.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000093","sortNo":63,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000094","sortNo":64,"contentFormatId":"1","contentTxt":"Above we use the set mySD input setter to check the condition and render the template if the condition is true.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000095","sortNo":65,"contentFormatId":"1","contentTxt":"The viewContainerRef.clear() function tells the view container not to render the elements. The createEmbeddedView embeds a template into the view container.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000096","sortNo":66,"contentFormatId":"1","contentTxt":"Here’s something for you to try out:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000097","sortNo":67,"contentFormatId":"1","contentTxt":"Can you create a custom structural directive that replicates the functionality of *ngFor?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000098","sortNo":68,"contentFormatId":"1","contentTxt":"How would you embed multiple templates into the view container?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000099","sortNo":69,"contentFormatId":"1","contentTxt":"<strong>Attribute Directives</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000100","sortNo":70,"contentFormatId":"1","contentTxt":"The purpose of attribute directives is to change the appearance or behavior of elements in the DOM. Unlike structural directives, we aren’t trying to change the structure of the elements (or the position).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000101","sortNo":71,"contentFormatId":"1","contentTxt":"If you’re following along with the git repo, you can see the custom attribute directive we have created by entering git checkout attribute-directive.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000102","sortNo":72,"contentFormatId":"1","contentTxt":"The directive we have created allows you to strike through any element with a click. Here’s what it looks like.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000103","sortNo":73,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000104","sortNo":74,"contentFormatId":"1","contentTxt":"We already spoke about the @Directive decorator and the selector in the metadata. Let’s break down the other pieces in this attribute directive.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000105","sortNo":75,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000106","sortNo":76,"contentFormatId":"1","contentTxt":"ElementRef gives us access to the DOM’s element. We will use this to toggle the text-decoration property of the element.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000107","sortNo":77,"contentFormatId":"1","contentTxt":"Renderer basically allows us to render the changes we want to make to the element.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000108","sortNo":78,"contentFormatId":"1","contentTxt":"Since we want to change the behavior when the user clicks the element, we need a way to access events. For this, we use the @HostListener decorator.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000109","sortNo":79,"contentFormatId":"1","contentTxt":"We now have access to different events on the element which uses this directive.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000110","sortNo":80,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000111","sortNo":81,"contentFormatId":"1","contentTxt":"In the code above, we listen for a click event and then toggle the line-through property of the element by calling the strike function.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000112","sortNo":82,"contentFormatId":"1","contentTxt":"The strike function simply uses the renderer to change the element style (based on the condition passed in the argument).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000113","sortNo":83,"contentFormatId":"1","contentTxt":"<strong>Conclusion – Which Directive Should We Use?</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000114","sortNo":84,"contentFormatId":"1","contentTxt":"Let’s quickly go over the kinds of directives we discussed and their use cases.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000115","sortNo":85,"contentFormatId":"1","contentTxt":"<strong>1. Components (directives with templates)</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000116","sortNo":86,"contentFormatId":"1","contentTxt":"Use these to build the UI elements that are the building blocks of the application. You can nest components within other components.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000117","sortNo":87,"contentFormatId":"1","contentTxt":"This could be a route in your application, a clock on a page, a button that submits a form.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000118","sortNo":88,"contentFormatId":"1","contentTxt":"<strong>2. Structural Directives</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000119","sortNo":89,"contentFormatId":"1","contentTxt":"Use these when you want to change the DOM layout based on certain attributes or conditions.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000120","sortNo":90,"contentFormatId":"1","contentTxt":"In most cases, your layout requirements will be met the many structural directives within the Angular library.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000121","sortNo":91,"contentFormatId":"1","contentTxt":"<strong>3. Attribute Directives</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000122","sortNo":92,"contentFormatId":"1","contentTxt":"Use these directives when you want to change the behavior or appearance of your components or HTML elements. You can make these directives respond to user interaction as well by using the @HostListener decorator.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000123","sortNo":93,"contentFormatId":"1","contentTxt":"Congratulations! You now know about the three different kinds of Angular 2 directives and how to use them in your next Angular 2 application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000124","sortNo":94,"contentFormatId":"1","contentTxt":"<strong>source code</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611170000000125","sortNo":95,"contentFormatId":"1","contentTxt":"<a href=\"https://github.com/cartab/learn-directives\">https://github.com/cartab/learn-directives</a>","contentBinary":"","contentPoster":"","contentUrl":null}]