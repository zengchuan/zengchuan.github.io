[{"id":"201611030000000026","sortNo":1,"contentFormatId":"1","contentTxt":"When I started developing and writing tests for Angularjs applications, everything felt natural. The tools were mature and I easily got used to developing applications in TDD (Test-Driven Development). It gave me a high level of confidence, knowing that my application was working as I had imagined. Just after Angular 2 came out and I learned the basics, I knew that the next step was to testing.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000027","sortNo":2,"contentFormatId":"1","contentTxt":"This article is the first part of a series in which I share my experiences testing different building blocks of an Angular 2 application. We will start with simple use cases and then head for more complex ones.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000028","sortNo":3,"contentFormatId":"1","contentTxt":"You may wonder why it is so important to write tests.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000029","sortNo":4,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000030","sortNo":5,"contentFormatId":"1","contentTxt":"With tests, we can ensure the correctness of our application: that the code does what it was designed to do. We can guard against someone breaking our code by refactoring or adding new features. This might have happened to you when someone added a small feature or equivalent code transformations and nothing worked afterwards. Writing tests can clarify the intention of the code by giving usage examples. It can also reveal design flaws. When a piece of code is hard to test, there might be a problem with the underlying architecture.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000031","sortNo":6,"contentFormatId":"1","contentTxt":"If you are new to Test-Driven Development, I would recommend reading the Test-Driven Development book by Kent Beck. It gives a nice overview about the concepts and best practices.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000032","sortNo":7,"contentFormatId":"1","contentTxt":"<strong>Choosing the framework to test Angular 2</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000033","sortNo":8,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000034","sortNo":9,"contentFormatId":"1","contentTxt":"The first thing we have to choose is the framework. The one suggested by Angular 2's core team is Jasmine. For a long time it was the only supported testing framework, because test setups were hard wired into the framework. Thanks to refactoring, now tests can also be written in Mocha, or any other framework that supports the beforeEach hook. This hook runs before every test run. If your framework of choice doesn't support it, you have to add the following code snippet to your setup:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000035","sortNo":10,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000036","sortNo":11,"contentFormatId":"1","contentTxt":"The first line within the hook resets the internal state of the Dependency Injection container. It clears out any given provider or module. If you are not familiar with Dependency Injection, I would recommend reading the official documentation about it.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000037","sortNo":12,"contentFormatId":"1","contentTxt":"The second one clears out any remaining zone that fakes asynchronous operations like setTimeout. Detailed articles can be found on the Thoughtram blog about zones: Understanding zones and Zones in Angular 2.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000038","sortNo":13,"contentFormatId":"1","contentTxt":"For this series, we will be using Jasmine as the test framework.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000039","sortNo":14,"contentFormatId":"1","contentTxt":"<strong>Writing the first Angular 2 test</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000040","sortNo":15,"contentFormatId":"1","contentTxt":"Let's look at our first service that will be tested.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000041","sortNo":16,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000042","sortNo":17,"contentFormatId":"1","contentTxt":"It has two getter methods and the Injectable decorator. The tests will check whether these getter methods work as intended. The decorator is needed to utilize dependency injection.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000043","sortNo":18,"contentFormatId":"1","contentTxt":"In Jasmine, we can group our tests with the describe method. Within this method, we can create test cases with the it function. It is advised to place one class per file (the service) and group the tests around it (with describe). We can further group test cases around methods of the class by placing describe statements inside the top describe block. For now we will only group our tests around the class.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000044","sortNo":19,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000045","sortNo":20,"contentFormatId":"1","contentTxt":"In this setup, only plain instantiation is used; we will introduce dependency injection later. For basic services, plain instantiation can be enough.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000046","sortNo":21,"contentFormatId":"1","contentTxt":"We call the getHorsepower method of the engine and check that it's equal to the expected value.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000047","sortNo":22,"contentFormatId":"1","contentTxt":"The first test is green and has been passed. Let's write another one for the getName method.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000048","sortNo":23,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000049","sortNo":24,"contentFormatId":"1","contentTxt":"If you run the tests, a similar output will be on the terminal.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000050","sortNo":25,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000051","sortNo":26,"contentFormatId":"1","contentTxt":"Both tests have been passed; it is time to refactor. There is duplication at the start of each Angular 2 test. Instantiation is exactly the same, we can move it out into a setup block.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000052","sortNo":27,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000053","sortNo":28,"contentFormatId":"1","contentTxt":"The subject variable is declared at the start of the describe block, and the creation of the service is moved to the beforeEach block. This way we don't have to do it manually every time. It is common to move the creation of the test case subject to a separate method, because it offloads the tests and makes them more readable.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000054","sortNo":29,"contentFormatId":"1","contentTxt":"<strong>Using Dependency Injection</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000055","sortNo":30,"contentFormatId":"1","contentTxt":"Creating services directly can be good if the subject under test has no or few, dependencies. But if it has multiple dependencies, or a deeper dependency tree, setting up all the classes becomes tedious. For these situations, we can use Angular 2's dependency injection management.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000056","sortNo":31,"contentFormatId":"1","contentTxt":"The Car class uses the Engine class in the constructor and its instance in the getName method.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000057","sortNo":32,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000058","sortNo":33,"contentFormatId":"1","contentTxt":"We check for the getName method's output in the test after we set up the dependency injection container.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000059","sortNo":34,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000060","sortNo":35,"contentFormatId":"1","contentTxt":"The difference here is that we configure the TestBed with the provided services in the configureTestingModule method. Only these classes can be instantiated with the inject method. If we try to request something else, we get an error saying it is an unknown provider.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000061","sortNo":36,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000062","sortNo":37,"contentFormatId":"1","contentTxt":"We can request instances of the services in an array from the inject method. In the callback, we get the instances in the same order as in the dependency array with the first parameter. The type hint inside the callback is only for IDE completion; it also works without it. In the example, it is placed inside the beforeEach function, but it can also be added to the it block.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000063","sortNo":38,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000064","sortNo":39,"contentFormatId":"1","contentTxt":"<strong>Mocking</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000065","sortNo":40,"contentFormatId":"1","contentTxt":"In unit tests for Angular 2, we want to execute the code in isolation. This means it is not dependent on big, complex objects and is not calling methods that rely on external systems (like HTTP calls or database access). In these cases, we want to simulate the original behavior while skipping the underlying implementation.\n\nWhen achieved, it is called mocking. We don't have to do it manually. Jasmine provides tools to make it work. Let's assume that the method of the Engine class has a call through to the server and we want to mock it.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000066","sortNo":41,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000067","sortNo":42,"contentFormatId":"1","contentTxt":"We mock the class methods by calling the spyOn method on the class's prototype. We also alter the return value of the function. This way the original method never gets called. When mocking the prototype, it affects every instance of the class.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000068","sortNo":43,"contentFormatId":"1","contentTxt":"<strong>Using Dependency Injection for Mocking</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000069","sortNo":44,"contentFormatId":"1","contentTxt":"The previous solution for mocking can be achieved also with Angular 2's dependency injection mechanism. We pass the Engine class as the provider token, but create the instances with a fake class.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000070","sortNo":45,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000071","sortNo":46,"contentFormatId":"1","contentTxt":"Then we pass this fake class to the setup.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000072","sortNo":47,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000073","sortNo":48,"contentFormatId":"1","contentTxt":"With this setup, the inject call will return an instance of V8Engine when asked for Engine. We can also use useFactory with a callback, or useValue with an instance, to accomplish the same result. The only drawback here is that every method of the class must be implemented and changed whenever the original class changes. The original class can be extended optionally in order to override only specific methods.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000074","sortNo":49,"contentFormatId":"1","contentTxt":"<strong>Conclusion: What we've learned about Angular 2 Testing</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000075","sortNo":50,"contentFormatId":"1","contentTxt":"In this tutorial, we managed to:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000076","sortNo":51,"contentFormatId":"1","contentTxt":"1. use dependency injection in tests","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000077","sortNo":52,"contentFormatId":"1","contentTxt":"2. fake dependencies with Jasmine","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000078","sortNo":53,"contentFormatId":"1","contentTxt":"3. fake dependencies with dependency injection","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000079","sortNo":54,"contentFormatId":"1","contentTxt":"If you follow the steps introduced in this article and write tests for your Angular 2 application, you can sleep safe and sound. The code will work as intended and when someone accidentally breaks it, the tests will warn him that those changes are unsafe and shouldn't be committed until the tests are green again.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000080","sortNo":55,"contentFormatId":"1","contentTxt":"Jasmine will help you along the way with its easy syntax and batteries included (assertion and mocking library).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000081","sortNo":56,"contentFormatId":"1","contentTxt":"Jasmine will help you along the way with its easy syntax and batteries included (assertion and mocking library).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000082","sortNo":57,"contentFormatId":"1","contentTxt":"<strong>example</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000083","sortNo":58,"contentFormatId":"1","contentTxt":"<a href=\"https://github.com/blacksonic/angular2-testing-ground\">https://github.com/blacksonic/angular2-testing-ground</a>","contentBinary":"","contentPoster":"","contentUrl":null}]