[{"id":"201608180000000016","sortNo":1,"contentFormatId":"1","contentTxt":"The idea of this answer is to show, how we can:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000017","sortNo":2,"contentFormatId":"1","contentTxt":"1. create some dynamic TEMPLATE","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000018","sortNo":3,"contentFormatId":"1","contentTxt":"2. pass it to a BUILDER which will create a dynamic Component TYPE","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000019","sortNo":4,"contentFormatId":"1","contentTxt":"3. use RuntimeCompiler to get access to its instance","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000020","sortNo":5,"contentFormatId":"1","contentTxt":"4. have a handling component, which is able to refresh and recreate dynamic content and properly cleanup the old one","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000021","sortNo":6,"contentFormatId":"1","contentTxt":"We for example use this approach to dynamically generate detail views based on some configuration. So, our goal will be:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000022","sortNo":7,"contentFormatId":"1","contentTxt":"Create entity editor, which will be able to dynamically switch TEXTAREA with INPUT. We will use some simple property editors: 1) StringEditor (using INPUT) 2) TextEditor (using TEXTAREA). Based on some external setting we will dynamically change them.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000023","sortNo":8,"contentFormatId":"1","contentTxt":"Other words, in one case we want to have dynamically generated template like this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000024","sortNo":9,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000025","sortNo":10,"contentFormatId":"1","contentTxt":"And then based on some setting to convert it to text-editor","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000026","sortNo":11,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000027","sortNo":12,"contentFormatId":"1","contentTxt":"This goal is really simple, but all technique we will use, should show the steps needed to achieve awesome dynamic results.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000028","sortNo":13,"contentFormatId":"1","contentTxt":"<strong>template builder</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000029","sortNo":14,"contentFormatId":"1","contentTxt":"In our case, we will have a simple Template builder, which is able to take an entity like this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000030","sortNo":15,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000031","sortNo":16,"contentFormatId":"1","contentTxt":"and create the required template:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000032","sortNo":17,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000033","sortNo":18,"contentFormatId":"1","contentTxt":"Really just an example, of a builder. It could be much more sophisticated, using configuration etc. The real trick here is - it builds a template which uses some kind of know properties, e.g. entity. Such property must be part of dynamic component, which we will build next. Other words, Template builder must be creating stuff which uses known properties, e.g. defined in this interface","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000034","sortNo":19,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000035","sortNo":20,"contentFormatId":"1","contentTxt":"<strong>component builder</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000036","sortNo":21,"contentFormatId":"1","contentTxt":"Very important thing here to keep in mind is - our type, build with our DynamicTypeBuilder, could differ - but only in its template (build above). Components properties (inputs, outputs or some protected) are still same. If we need different properties, we should define different combination of Template and Type Builder","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000037","sortNo":22,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000038","sortNo":23,"contentFormatId":"1","contentTxt":"As already said, our component dynamic types differ, but just by template. So we use that fact to cache them. This is really very important. Angular2 will also cache these.. by the type. And if we would recreate for the same template strings new types... we will start to generate memory leaks.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000039","sortNo":24,"contentFormatId":"1","contentTxt":"Now, we will observe a component, e.g. some DetailView. It is provided or uses some Metadata, Configuration, Settings to properly create Template and related Component Type - as we've seen above in a simplified way.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000040","sortNo":25,"contentFormatId":"1","contentTxt":"<strong>NgModule</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000041","sortNo":26,"contentFormatId":"1","contentTxt":"With RC 5, Angular 2 will bootstrap NgModule - here is an example:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000042","sortNo":27,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000043","sortNo":28,"contentFormatId":"1","contentTxt":"<strong>RuntimeCompiler used by hosting component</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000044","sortNo":29,"contentFormatId":"1","contentTxt":"Let's observe the basics of it","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000045","sortNo":30,"contentFormatId":"1","contentTxt":"In our case, we would need these import statements","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000046","sortNo":31,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000047","sortNo":32,"contentFormatId":"1","contentTxt":"Another snippet shows standard decorator and constructor parts:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000048","sortNo":33,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000049","sortNo":34,"contentFormatId":"1","contentTxt":"These are properties (hope clearly described in comments)","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000050","sortNo":35,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000051","sortNo":36,"contentFormatId":"1","contentTxt":"and here are basic methods handling the events","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000052","sortNo":37,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000053","sortNo":38,"contentFormatId":"1","contentTxt":"And finally RuntimeCompiler. It gets template, component type - and calls compileComponentAsync(dynamicType, MyModule). And that is the place where we must provide new feature NgModule (MyModule in our case).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000054","sortNo":39,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000055","sortNo":40,"contentFormatId":"1","contentTxt":"More should be clear by observing the example.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000056","sortNo":41,"contentFormatId":"1","contentTxt":"subject:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201608180000000057","sortNo":42,"contentFormatId":"1","contentTxt":"<a href=\"http://stackoverflow.com/questions/34784778/equivalent-of-compile-in-angular-2\">http://stackoverflow.com/questions/34784778/equivalent-of-compile-in-angular-2</a>","contentBinary":"","contentPoster":"","contentUrl":null}]