[{"id":"201701220000000100","sortNo":1,"contentFormatId":"1","contentTxt":"In this post I’ll cover one of the most important concepts of Angular: compilation.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000101","sortNo":2,"contentFormatId":"1","contentTxt":"<strong>Compilation</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000102","sortNo":3,"contentFormatId":"1","contentTxt":"At the core of Angular is a sophisticated compiler, which takes an NgModule type and produces an NgModuleFactory.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000103","sortNo":4,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000104","sortNo":5,"contentFormatId":"1","contentTxt":"An NgModule has components declared in it. While creating the module factory, the compiler will take the template of every component in the module, and using the information about declared components and pipes, will produces a component factory. The component factory is a JavaScript class the framework can use to stamp out components.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000105","sortNo":6,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000106","sortNo":7,"contentFormatId":"1","contentTxt":"<strong>JIT and AOT</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000107","sortNo":8,"contentFormatId":"1","contentTxt":"Angular 1 is a sophisticated HTML compiler that generates code at runtime. New versions of Angular have this option too: they can generate the code at runtime, or just in time (JIT). In this case the compilation happens while the application is being bootstrapped. But they also have another option: they can run the compiler as part of application’s build, or ahead of time (AOT).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000108","sortNo":9,"contentFormatId":"1","contentTxt":"<strong>Why would I want to do it?</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000109","sortNo":10,"contentFormatId":"1","contentTxt":"Compiling your application ahead of time is beneficial for the following reasons:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000110","sortNo":11,"contentFormatId":"1","contentTxt":"1. We no longer have to ship the compiler to the client. And so it happens, the compiler is the largest part of the framework. So it has a positive effect on the download size.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000111","sortNo":12,"contentFormatId":"1","contentTxt":"2. Since the compiled app doesn’t have any HTML, and instead has the generated TypeScript code, the TypeScript compiler can analyze it to produce type errors. In other words, your templates are type safe.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000112","sortNo":13,"contentFormatId":"1","contentTxt":"3. Bundlers (e.g., WebPack, Rollup) can tree shake away everything that is not used in the application. This means that you no longer have to create 50-line node modules to reduce the download size of your application. The bundler will figure out which components are used, and the rest will be removed from the bundle.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000113","sortNo":14,"contentFormatId":"1","contentTxt":"4. Finally, since the most expensive step in the bootstrap of your application is compilation, compiling ahead of time can significantly improve the bootstrap time.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000114","sortNo":15,"contentFormatId":"1","contentTxt":"To sum up, using the AOT compilation makes your application bundles smaller, faster, and safer. You can read more about the performance benefits of AOT in an upcoming blog article by my Nrwl colleague Jeff Cross.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000115","sortNo":16,"contentFormatId":"1","contentTxt":"<strong>How is it possible?</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000116","sortNo":17,"contentFormatId":"1","contentTxt":"Why didn’t we do it before, in Angular 1? To make AOT work the application has to have a clear separation of the static and dynamic data in the application. And the compiler has to built in such a way that it only depends on the static data. When designing and building Angular we put a lot of effort to do exactly that. And such primitives as classes and decorators, which the new versions of JavaScript and TypeScript support, made it way easier.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000117","sortNo":18,"contentFormatId":"1","contentTxt":"To see how this separation works in practice, let’s look at the following example. Here, the information in the decorator is known statically. Angular knows the selector and the template of the talk component. It also knows that the component has an input called “talk” and an output called “rate”. But the framework does not know what the constructor or the onRate function do.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000118","sortNo":19,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000119","sortNo":20,"contentFormatId":"1","contentTxt":"Since Angular knows all the necessary information ahead of time, it can compile this component without actually executing any application code, as a build step.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000120","sortNo":21,"contentFormatId":"1","contentTxt":"<strong>Trade-offs</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000121","sortNo":22,"contentFormatId":"1","contentTxt":"Since AOT is so advantageous, we recommend to use it in production. But, as with everything, there are trade-offs. For Angular to be able to compile your application ahead of time, the metadata has to be statically analyzable. For instance, the following code will not work in the AOT mode:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000122","sortNo":23,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000123","sortNo":24,"contentFormatId":"1","contentTxt":"The window.hide property will not be defined. So the compilation will fail pointing out the error. A lot of work has been done to make the compiler smarter, so it can understand most of the day-to-day patterns you would use when building your application. But certain things will never work, like the example above.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000124","sortNo":25,"contentFormatId":"1","contentTxt":"<strong>Let’s Recap</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000125","sortNo":26,"contentFormatId":"1","contentTxt":"1. The central part of Angular is its compiler.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000126","sortNo":27,"contentFormatId":"1","contentTxt":"2. The compilation can be done just in time (at runtime) and ahead of time (as a build step).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000127","sortNo":28,"contentFormatId":"1","contentTxt":"3. The AOT compilation creates smaller bundles, tree shakes dead code, makes your templates type-safe, and improves the bootstrap time of your application.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000128","sortNo":29,"contentFormatId":"1","contentTxt":"4. The AOT compilation requires certain metadata to be known statically, so the compilation can happen without actually executing the code.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000129","sortNo":30,"contentFormatId":"1","contentTxt":"<strong>source code</strong>","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201701220000000130","sortNo":31,"contentFormatId":"1","contentTxt":"<a href=\"https://github.com/vsavkin/essential-angular-book-app\">https://github.com/vsavkin/essential-angular-book-app</a>","contentBinary":"","contentPoster":"","contentUrl":null}]