[{"id":"201512290000000001","sortNo":1,"contentFormatId":"1","contentTxt":"Yesterday, the AngularJS Team announced the official beta release of Angular 2. The beta milestone is a significant achievement that should motivate developers to give Angular 2 a serious consideration for new web/mobile projects. Besides getting ready for primetime, Angular 2 offers some significant improvements over Angular 1 (just read here). In this post, I’ll describe the steps of building an Angular 2 application that authenticates to Azure Active Directory (using an implicit OAuth2 flow) and calls into the Microsoft Graph API. In addition to the completed solution on GitHub, I’ve also provided a step-by-step video of building the Angular 2/Office 365 app from scratch:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000002","sortNo":2,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000003","sortNo":3,"contentFormatId":"1","contentTxt":"Angular 2 and TypeScript","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000004","sortNo":4,"contentFormatId":"1","contentTxt":"The AngularJS Team worked closely with Microsoft to take advantage of TypeScript in Angular 2. If you are new to TypeScript, it is a strongly-typed JavaScript superset that compiles down to JavaScript. Because it is class-based and type-strict, it is favored by many developers for client-side development (especially those with object oriented backgrounds). TypeScript introduces a few interesting challenges to a web project.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000005","sortNo":5,"contentFormatId":"1","contentTxt":"TypeScript must be compiled to JavaScript before run in a browser (some browsers can compile TypeScript, but this is slow). Luckily, the TypeScript compiler can be run in a watch mode that will automatically re-compile when a TypeScript file has been saved. Notice the start script we have configured below in the package.json (used by the Node Package Manager). This script will concurrently start the TypeScript complier in watch mode (tsc –w) and start the live-server web hosts (which also listens for files changes to provide automatic refreshes).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000006","sortNo":6,"contentFormatId":"1","contentTxt":"package.json with start script","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000007","sortNo":7,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000008","sortNo":8,"contentFormatId":"1","contentTxt":"The class-based implementation of TypeScript promotes the separation of different classes into different script files. This can make script references messy in HTML. To overcome this, the project (and samples on angular.io) use SystemJS to reference all the generated .js files as a package. Below shows the System.config that tells SystemJS to reference all the .js files found under the “src” folder.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000009","sortNo":9,"contentFormatId":"1","contentTxt":"System.config to dynamically load .js scripts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000010","sortNo":10,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000011","sortNo":11,"contentFormatId":"1","contentTxt":"OAuth2 with Azure AD","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000012","sortNo":12,"contentFormatId":"1","contentTxt":"The Azure AD Team created an Angular module for integrating the Azure AD Authentication Library (ADAL) into Angular 1 projects. For this project, I decided to leverage a manual/raw OAuth2 flow instead of using a library (which I think is valuable for all developers to understand). However, I’m starting to investigate the ngUpgrade and ngForward goodness the AngularJS Teams are offering for mixing Angular 1 and 2 in one project…perhaps my next post","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000013","sortNo":13,"contentFormatId":"1","contentTxt":"For an implicit OAuth flow with Azure AD, we will first redirect the user through a sign-in and consent flow to get an id_token. Once we have an id_token, we know the user is signed in and we should be able to get an access_token using a different redirect. These two redirects are depicted in the AuthHelper.ts file as the login and getAccessToken functions. Note that both the id_token and access_token will be passed back from Azure AD as URL parameters. The constructor handles this parameter check.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000014","sortNo":14,"contentFormatId":"1","contentTxt":"authHelper for manage Azure AD authentication","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000015","sortNo":15,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000016","sortNo":16,"contentFormatId":"1","contentTxt":"Angular 2 Routes","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000017","sortNo":17,"contentFormatId":"1","contentTxt":"Many single page applications in Angular 1 make use of Angular routing (or Angular UI Router) to dynamically load partial views without reloading the entire page. Implementing Angular 1 routing required an additional script reference and dependency to the routing module (ex: ngRoute). Angular 2 routing has many similarities to its predecessor…references an additional script reference, added as dependency on the root module, contains route config, offers object/functions to navigate between views, etc. However, these look much different when implemented in TypeScript. Below is the routing implementation for my project where I’ve highlighted routing specific code.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000018","sortNo":18,"contentFormatId":"1","contentTxt":"Note: the ADAL module for Angular 1 provided a route extension for determining if a view required authentication or not (via requireADLogin flag). Given my simple project contains only two views (login and files), I simply perform a check in the constructor of the App to navigate between the two based on the existence of an access token.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000019","sortNo":19,"contentFormatId":"1","contentTxt":"Route configuration in Angular 2","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000020","sortNo":20,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000021","sortNo":21,"contentFormatId":"1","contentTxt":"Calling the Microsoft Graph","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000022","sortNo":22,"contentFormatId":"1","contentTxt":"In Angular 1, the $http object was commonly used for performing REST calls into the Microsoft Graph. Angular 2 offers an Http object that performs the same operations. This requires an additional script reference and import as seen below. Also notice the addition of the Authorization Bearer token included in the header of the Microsoft Graph request.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000023","sortNo":23,"contentFormatId":"1","contentTxt":"Calling Microsoft Graph","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000024","sortNo":24,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000025","sortNo":25,"contentFormatId":"1","contentTxt":"Conclusions","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201512290000000026","sortNo":26,"contentFormatId":"1","contentTxt":"I’m really excited the see Angular 2 reach Beta and anxious to see the creative ways the Microsoft community leverages is in their solutions. You can download the Angular 2 Files project from GitHub: https://github.com/OfficeDev/O365-Angular2-Microsoft-Graph-MyFiles","contentBinary":"","contentPoster":"","contentUrl":null}]