[{"id":"201611030000000001","sortNo":1,"contentFormatId":"1","contentTxt":"In an Angular 2 application that uses TypeScript, the TypeScript compiler can extract type APIs from your *.ts files. But sometimes, you need to tell the TypeScript compiler to expect \"ambient values\" that are provided outside of the scope of the known *.ts files. To do this, you have to install a custom Typings file - *.d.ts - in your Angular 2 application. Doing this, at least for me as a TypeScript novice, was not straightforward. And, no amount of Googling seemed to provide an answer. Luckily, I just happened to come across a blog post by George Dyrrachitis on using TypeScript with Angular 2. In his post, George demonstrates how to install custom Typings files. All credit for my post goes to him! I'm just reiterating some of what he wrote in order to burn the concept into my brain meat.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000002","sortNo":2,"contentFormatId":"1","contentTxt":"When using TypeScript 2.x, the TypeScript compiler will automatically resolve types by pulling type definition files out of your @Types node-modules folder (assuming you've installed @Types). As such, the typings.json configuration file in your Angular 2 application may not start out with any dependencies:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000003","sortNo":3,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000004","sortNo":4,"contentFormatId":"1","contentTxt":"Even though there are no dependencies, running a typings install on this will still result in a \"typings\" folder, which we can reference in our TypeScript configuration file:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000005","sortNo":5,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000006","sortNo":6,"contentFormatId":"1","contentTxt":"Notice that we are explicitly telling the in-browser TypeScript compiler to fetch the root TypeScript file in the \"typings\" folder. This will, in turn, pull in any type definition files that were installed using typings.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000007","sortNo":7,"contentFormatId":"1","contentTxt":"Now, if we use relative file paths in our Angular 2 components, we need to define the \"moduleId\" in the component's meta-data. For example, in this simple App component, I'm using relative paths for the templateUrl and styleUrls meta-data properties:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000008","sortNo":8,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000009","sortNo":9,"contentFormatId":"1","contentTxt":"If we run this application using the in-browser compiler, it will work; but, the TypeScript loader will complain that it has no idea what this \"module.id\" value is:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000010","sortNo":10,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000011","sortNo":11,"contentFormatId":"1","contentTxt":"To remedy this, we have to install a custom Typings file that tells the TypeScript compiler about the API of the globally-available \"module\" object. To do this, we can create a custom *.d.ts type definition file for our application. For this demo, I'm going to put this file in a new folder, app-typings:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000012","sortNo":12,"contentFormatId":"1","contentTxt":"/app-typings/app.d.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000013","sortNo":13,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000014","sortNo":14,"contentFormatId":"1","contentTxt":"This Type definition file tells the TypeScript compiler that there is a \"module\" type that has an \"id\" property (of type String).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000015","sortNo":15,"contentFormatId":"1","contentTxt":"At this point, neither the Angular 2 application nor the TypeScript compiler knows about this file; so, we have to install it as a custom Typings file. Since I installed the Typings dependency using npm, I am going to reach into the node-modules to find the Typings executable:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000016","sortNo":16,"contentFormatId":"1","contentTxt":"./node_modules/.bin/typings install --global --save file:./app-typings/app.d.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000017","sortNo":17,"contentFormatId":"1","contentTxt":"Here, we're telling Typings to take the custom type definition file that we just created and install it as part of the typing echosystem for our application. When we do this, Typings will copy the app.d.ts file into the \"typings\" folder. But, it will also update our typings.json configuration file thanks to the \"--save\" option:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000018","sortNo":18,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000019","sortNo":19,"contentFormatId":"1","contentTxt":"At this point, now that the typings.json file is updated (and committed to your project's code repository), you should theoretically be able to delete the \"typings\" folder and re-run the generic install:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000020","sortNo":20,"contentFormatId":"1","contentTxt":"./node_modules/.bin/typings install","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000021","sortNo":21,"contentFormatId":"1","contentTxt":"You don't need to do this; I'm just demonstrating that you can do this in order to feel confident that your custom type definition file will get automatically installed by your continuous delivery server (if you use one) during deployment.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000022","sortNo":22,"contentFormatId":"1","contentTxt":"Now that we have the custom app.d.ts type definition file installed, we can re-run our Angular 2 application:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000023","sortNo":23,"contentFormatId":"2","contentTxt":"","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000024","sortNo":24,"contentFormatId":"1","contentTxt":"As you can see this time, there is no error about the \"module.id\" file. That's because the TypeScript compiler knows about our custom typings file which, in turn, tells it to expect the ambient module.id value.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201611030000000025","sortNo":25,"contentFormatId":"1","contentTxt":"For those of you who are familiar with TypeScript, this whole process might be painfully obvious. But, for people like me - who are dealing with TypeScript for the first time when learning Angular 2 - nothing about the Typing ecosystem is obvious. Especially not creating and including custom type definition files. Hopefully this post will help anyone else who - like myself - tried to Google for advice on custom type definitions files and continually came up empty.","contentBinary":"","contentPoster":"","contentUrl":null}]