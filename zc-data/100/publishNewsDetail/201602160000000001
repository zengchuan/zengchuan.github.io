[{"id":"201602160000000001","sortNo":1,"contentFormatId":"1","contentTxt":"Here we’re going through a couple of ways to conditionally apply some styles to a DOM element in Angular 2.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000002","sortNo":2,"contentFormatId":"1","contentTxt":"Directly manipulating styles property","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000003","sortNo":3,"contentFormatId":"1","contentTxt":"A rather unconventional way would be to return the styling property as a string and then to directly set it on the desired element: style.background-color]","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000004","sortNo":4,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000005","sortNo":5,"contentFormatId":"1","contentTxt":"Adding a class","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000006","sortNo":6,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000007","sortNo":7,"contentFormatId":"1","contentTxt":"The good old “ngClass”","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000008","sortNo":8,"contentFormatId":"1","contentTxt":"Theres another way of adding a class. Especially Angular 1 developers may immediately recognize this. The good old NgClass.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000017","sortNo":9,"contentFormatId":"1","contentTxt":"It is made available under the angular2/common module which we need to import:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000018","sortNo":10,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000019","sortNo":11,"contentFormatId":"1","contentTxt":".and obviously reference it in the directives property of our component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000020","sortNo":12,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000021","sortNo":13,"contentFormatId":"1","contentTxt":"Then we can use it just as we did in Angular 1. Here’s the full code example.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000022","sortNo":14,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000023","sortNo":15,"contentFormatId":"1","contentTxt":"Referencing the DOM element directly via ElementRef","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000024","sortNo":16,"contentFormatId":"1","contentTxt":"The last possibility is by directly interacting with the underlying DOM element. For that purpose we create a directive styled which we add to our div.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000025","sortNo":17,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000026","sortNo":18,"contentFormatId":"1","contentTxt":"Our directive looks like this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000027","sortNo":19,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000028","sortNo":20,"contentFormatId":"1","contentTxt":"The important part here is the ElementRef and the Renderer which I import in the constructor.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000029","sortNo":21,"contentFormatId":"1","contentTxt":"The ElementRef allows us to gain access to the nativeElement via","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000030","sortNo":22,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000031","sortNo":23,"contentFormatId":"1","contentTxt":"This way you can deliberately modify the properties of the native DOM element. So why would I want to use the Renderer. Well, Angular 2 isn’t only build for the browser, but it can potentially also be rendered on the server or render native elements on a mobile device (via NativeScript for instance). Thus, the Renderer provides an abstraction over the native elements.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000032","sortNo":24,"contentFormatId":"1","contentTxt":"Conclusion","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000033","sortNo":25,"contentFormatId":"1","contentTxt":"So in this article you learned about three possibilities to style your DOM elements from within Angular 2. You got to see","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000034","sortNo":26,"contentFormatId":"1","contentTxt":"1. directly binding with [style.background-color]","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000035","sortNo":27,"contentFormatId":"1","contentTxt":"2. adding a class [class.my-class]","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000036","sortNo":28,"contentFormatId":"1","contentTxt":"3. using NgClass [ngClass]","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201602160000000037","sortNo":29,"contentFormatId":"1","contentTxt":"4. by directly accessing the native DOM element","contentBinary":"","contentPoster":"","contentUrl":null}]