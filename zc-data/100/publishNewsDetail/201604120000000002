[{"id":"201604120000000019","sortNo":1,"contentFormatId":"1","contentTxt":"In this post I will demonstrate how to create a simple treeview using Angular 2.0 and TypeScript.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000020","sortNo":2,"contentFormatId":"1","contentTxt":"TypeScript is optional, but seems to be where Angular 2 is headed, so why not embrace it form the start? In my opinion TypeScript adds some sorely needed semantics to JavaScript.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000021","sortNo":3,"contentFormatId":"1","contentTxt":"Anyway, on to the task at hand!","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000022","sortNo":4,"contentFormatId":"1","contentTxt":"I created a super basic treeview, but it does highlight some core Angular 2.0 principles by showing how to render (recursive) templates, add click handlers and basic hide/show logic. In reality, this is probably an 80% use case for most Angular development.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000023","sortNo":5,"contentFormatId":"1","contentTxt":"I start out by creating a wrapper component that bootstraps the application and includes the actual treeview component on the page. This sample treeview renders a recursive directory structure with sub directories and files.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000024","sortNo":6,"contentFormatId":"1","contentTxt":"app.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000025","sortNo":7,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000026","sortNo":8,"contentFormatId":"1","contentTxt":"I won't go into a lot of details about the specific component syntax since the Angular team has already released pretty good references and samples.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000027","sortNo":9,"contentFormatId":"1","contentTxt":"Next I have created the recursive treeview component","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000028","sortNo":10,"contentFormatId":"1","contentTxt":"tree-view.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000029","sortNo":11,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000030","sortNo":12,"contentFormatId":"1","contentTxt":"The treeview component is included in the main component as <tree-view></tree-view>, but notice in the html for the treeview, there is a self reference. This is important since it's how I am able to render the nodes recursively.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000031","sortNo":13,"contentFormatId":"1","contentTxt":"Tree-view.html","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000032","sortNo":14,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000033","sortNo":15,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000034","sortNo":16,"contentFormatId":"1","contentTxt":"If you're still reading you may have noticed that I purposely define most of the logic in the model class â€“ not in the angular component.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000035","sortNo":17,"contentFormatId":"1","contentTxt":"This is conscious choice since it allows me to decouple the core logic from a having a hard dependency on Angular or any other framework for that matter. In the end this is just pure typescript that can be ported to just about any other framework (e.g. Aurelia, Angular 1.x, ReactJS, whatever..).","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000036","sortNo":18,"contentFormatId":"1","contentTxt":"You may find it odd that I advocate that you limit the use of Angular in an Angular tutorial. However, this is not meant as a criticism of Angular, but rather a consequence of how fluid the JavaScript framework situation is at the moment. Keeping things decoupled and limit unnecessary dependencies is important if you want to avoid untold pain during a potential migration. In fact this advice applies equally to a future migration from Angular 1.x to Angular 2.x as well due to how different the two versions are.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000037","sortNo":19,"contentFormatId":"1","contentTxt":"Another huge benefit of this design is that it's very unit test friendly. A unit test doesn't even have to know that a UI framework is involved.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000038","sortNo":20,"contentFormatId":"1","contentTxt":"Anyway, this was just my first stab at Angular 2.0 and I am excited to see what's next for the framework.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000039","sortNo":21,"contentFormatId":"1","contentTxt":"Here is a screen shot of an unstyled version of the treeview","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000040","sortNo":22,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000041","sortNo":23,"contentFormatId":"1","contentTxt":"source code:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201604120000000042","sortNo":24,"contentFormatId":"1","contentTxt":"<a href=\"https://github.com/thelgevold/angular-2-samples\">https://github.com/thelgevold/angular-2-samples</a>","contentBinary":"","contentPoster":"","contentUrl":null}]