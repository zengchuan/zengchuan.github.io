[{"id":"201603160000000204","sortNo":1,"contentFormatId":"1","contentTxt":"Get an idea of how Angular2 internal rendering system works","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000205","sortNo":2,"contentFormatId":"1","contentTxt":"Angular2 is currently in beta with a stable release hopefully coming out sometime in the coming months. Lot's of new amazing stuff is being developed both inside and outside of the framework. New features such as a new version of NgAnimate, a pre-compilation build-step, and even Web Worker support are all coming to the framework. Another super cool feature that is in Angular2 is custom rendering. With the new design decisions that Angular2 has brought forth, the possibility of setting up a custom renderer to take on the UI responiblities is something that is possible.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000206","sortNo":3,"contentFormatId":"1","contentTxt":"Let's briefly dive into how the rendering architecture of Angular2 works.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000207","sortNo":4,"contentFormatId":"1","contentTxt":"Why Rendering?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000208","sortNo":5,"contentFormatId":"1","contentTxt":"You may be wondering why (with such a long pause in between articles) all of a sudden an article pops up about Angular2 rendering? Well because I work on the Angular2 project full-time (mostly Angular2 animations and other core areas of the framework), it's easy to get lost in the thousands and thousands of lines of source code surrounding the new framework. One such area which I've found to be super impressive is the architecture of how the Angular2 renderer operates.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000209","sortNo":6,"contentFormatId":"1","contentTxt":"The DOM Renderer in Angular2 is built in such a way that it allows it to be extended and overridden with rendering code that can render the application in another environment besides the DOM. What exactly does this mean? Well what if we could render our entire Angular2 application in a web view inside of Electron or PhoneGap by just changing a JavaScript class? What about if we could render HTML code in something like a canvas element just for the fun of it? Well Angular2's rendering architecture allows for this kind functionality to work.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000210","sortNo":7,"contentFormatId":"1","contentTxt":"What does rendering mean again?","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000211","sortNo":8,"contentFormatId":"1","contentTxt":"Rendering in Angular2 means how the framework decides to draw/print/display the application. Almost 100% time this means that the application will be rendered in the DOM (duhh it's a web application), but sometimes it makes sence to render it in a different environment.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000212","sortNo":9,"contentFormatId":"1","contentTxt":"Note: Experimental","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000213","sortNo":10,"contentFormatId":"1","contentTxt":"Keep in mind that the code within this article and within the github repositories is subject to change. Due to the fact that Angular2 is in beta, this means that the underlying Renderer API code may change. Also keep in mind that the more experimental renderers (such as the canvas renderer) are just a proof of concept for now, but, who knows, maybe something stable and practical will come around in the future...","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000214","sortNo":11,"contentFormatId":"1","contentTxt":"Note: Typescript","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000215","sortNo":12,"contentFormatId":"1","contentTxt":"The code examples and github code featured in this article is coded with a typed superset of JavaScript called TypeScript. TypeScript is developed by Microsoft and is used all throughout the Angular2 codebase. Therefore if you see anything in the JavaScript/TypeScript code below that looks like it deviates from regular JavaScript then keep in mind that is is apart of the TypeScript language and if you intend on writing your own renderer then it's probably best to do so with TypeScript.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000216","sortNo":13,"contentFormatId":"1","contentTxt":"The Angular2 Renderer","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000217","sortNo":14,"contentFormatId":"1","contentTxt":"So how exactly is Angular2 built such that it allows for custom renderers to be created? The first thing to understand is that the internal bits of Angular2 are split into two areas: the worker (core) area and the UI area. The worker (core) area is responsible for building out the components, directives, filters, services and bootstrap code; The UI area is responible for rendering out the application in the DOM. Another way to think of this is that the worker area is the CPU/memory of the application and the UI area is the graphics card.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000218","sortNo":15,"contentFormatId":"1","contentTxt":"When an Angular2 application is doing its thing, the worker area sends instructions over to the UI area describing what elements to insert/remove into/from the DOM and what other DOM-related properties to update. The UI area then listens on the set event listeners and then tells the worker area what user-driven activities have occurred.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000219","sortNo":16,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000220","sortNo":17,"contentFormatId":"1","contentTxt":"Angular2 is built this way to allow for web worker support and to minimize DOM access. It is also constructed in this way to allow Angular2 to run in a server environment for pre-compilation purposes.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000221","sortNo":18,"contentFormatId":"1","contentTxt":"Why does all of this stuff matter? Well understanding how and why the worker/ui separation works is important to understanding how to create your own renderer. And now that we understand the basis of why this is designed this way, let's see what it takes to create our own renderer.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000222","sortNo":19,"contentFormatId":"1","contentTxt":"Making our own Renderer","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000223","sortNo":20,"contentFormatId":"1","contentTxt":"Once again, this is experimental. We will be extending the default DomRenderer class to patch some of the methods to allow us to render our Angular2 application in a canvas element. Sounds crazy? Yes. Sounds useless? Maybe. But it's a fun exercise non-the-less.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000224","sortNo":21,"contentFormatId":"1","contentTxt":"A Simple Example of the API","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000225","sortNo":22,"contentFormatId":"1","contentTxt":"Due to the fact that the API may change before Angular 2.0 stable has been released, it's best to have a look at this code directly on github. However, it is also important that we go over at least some of the render code. So with that said, let's see the basics of our canvas renderer:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000254","sortNo":23,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000255","sortNo":24,"contentFormatId":"1","contentTxt":"This render code above is just the skeleton for setting up a renderer. When Angular attempts to render out the application it will execute the various function calls present on the active renderer (by default DomRenderer however in this case CanvasRenderer). Therefore whatever code is executed within these methods can allow us to render out the application in a different way than just within the DOM.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000256","sortNo":25,"contentFormatId":"1","contentTxt":"Say for example, instead of inserting an item into the DOM, we want to just print out a canvas block that says the name of the element. We can do so inside of our render code:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000257","sortNo":26,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000258","sortNo":27,"contentFormatId":"1","contentTxt":"Now the canvas container will display each element within the template code one by one on screen. Now this code isn't functional on its own, but the application below is one that is operational.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000259","sortNo":28,"contentFormatId":"1","contentTxt":"A Working Example","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000260","sortNo":29,"contentFormatId":"1","contentTxt":"Have a look at: <a href=\"https://github.com/matsko/angular2-canvas-renderer-experiment\" >https://github.com/matsko/angular2-canvas-renderer-experiment</a>. Run the installation steps outlined in the README and see the application in action.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000261","sortNo":30,"contentFormatId":"1","contentTxt":"Notice how the render code is able to take the application HTML code...","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000262","sortNo":31,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000263","sortNo":32,"contentFormatId":"1","contentTxt":"And render it through the canvas renderer into this:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000264","sortNo":33,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000265","sortNo":34,"contentFormatId":"1","contentTxt":"Be sure to look over the code inside of src/app.ts to see the full renderer code.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000266","sortNo":35,"contentFormatId":"1","contentTxt":"Angular Electron Renderer","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000267","sortNo":36,"contentFormatId":"1","contentTxt":"Let's shift our focus to experimenting with another renderer...","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000268","sortNo":37,"contentFormatId":"1","contentTxt":"Electron is a project developed by Github and used by the Atom editor that allows for a web application to be rendered and executed as if it were a desktop application. (It's essentially phonegap for desktop.)","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000269","sortNo":38,"contentFormatId":"1","contentTxt":"he Angular project has a plugin being developed to allow Electron to be used as a renderer within an Angular app, angular/angular-electron, but it isn't fully ready for use just yet. For now it's best to play with a pre-existing appilcation that makes use of Angular2 and electron and then deconstruct the internal code to see how it all works.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000270","sortNo":39,"contentFormatId":"1","contentTxt":"Angular Electron Demo App","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000271","sortNo":40,"contentFormatId":"1","contentTxt":"The <a href=\"https://github.com/matsko/angular2-multi-client\">project below </a>contains two files: src/web.ts and src/desktop.ts both of which contain the necessary boostrap code to kickstart the Angular2 application in web and desktop. The former contains our standard web bootstrap code while latter contains a bootstrap call that is imported from the angular-electron plugin.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000272","sortNo":41,"contentFormatId":"1","contentTxt":"src/web.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000273","sortNo":42,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000274","sortNo":43,"contentFormatId":"1","contentTxt":"src/desktop.ts","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000275","sortNo":44,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000276","sortNo":45,"contentFormatId":"1","contentTxt":"When run, the application will render in both web and desktop (an actual desktop application). The screenshots below show this in action:","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000277","sortNo":46,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000278","sortNo":47,"contentFormatId":"2","contentTxt":null,"contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000279","sortNo":48,"contentFormatId":"1","contentTxt":"Besides the bootstrap files and some changes to how modules are loaded for electron, the core parts of the application are the same. The link below points to this the demo application for this. Click below to see more.","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000280","sortNo":49,"contentFormatId":"1","contentTxt":"Recap","contentBinary":"","contentPoster":"","contentUrl":null},{"id":"201603160000000281","sortNo":50,"contentFormatId":"1","contentTxt":"Rendering in Angular2 is still in it's API infancy. Yes the API may change before stable is released, but this shouldn't let us experiment with cool ways to render an Angular2 application. Please play around with this cool new feature and see what you guys come up with.","contentBinary":"","contentPoster":"","contentUrl":null}]